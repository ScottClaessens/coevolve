[{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to the coevolve package","text":"vignette provides introduction coevolve package. briefly describes class generalized dynamic phylogenetic models (GDPMs) package designed fit. runs several working examples showcase features package, including models different response distributions, missing data, repeated observations, multiPhylo tree objects, controls spatial location.","code":""},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"the-generalized-dynamic-phylogenetic-model","dir":"Articles","previous_headings":"","what":"The generalized dynamic phylogenetic model","title":"Introduction to the coevolve package","text":"coevolve package, main function coev_fit(), fits generalized dynamic phylogenetic model taxa variables given phylogenetic relationships among taxa. model allows user determine whether evolutionary change one variable precedes evolutionary change another variable. full description model can found pre-print. Briefly, model represents observed variables latent variables allowed coevolve along evolutionary time series. Coevolution unfolds according stochastic differential equation similar Ornstein-Uhlenbeck process, contains “selection” (tendency towards optimum value) “drift” (exogenous Gaussian noise) components. Change latent variables depend upon latent variables model , allowing users assess directional influence one variable future change another variable. Similar dynamic coevolutionary models offered programs like BayesTraits (see ). However, models limited small number discrete traits. coevolve package goes beyond models allowing user estimate coevolutionary effects number variables much wider range response distributions, including continuous, binary, ordinal, count distributions.","code":""},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"a-working-example","dir":"Articles","previous_headings":"","what":"A working example","title":"Introduction to the coevolve package","text":"show model action, use data political religious authority among 97 Austronesian societies. Political religious authority four-level ordinal variables representing whether type authority absent (present household level), sublocal (incorporating group larger household smaller local community), local (incorporating local community) supralocal (incorporating one local community). data compiled Sheehan et al. (2023). society separate row linked different Austronesian language. languages can represented linguistic phylogeny (see authority$phylogeny). interested using phylogeny understand political religious authority coevolved course Austronesian cultural evolution. fit generalized dynamic phylogenetic model, use coev_fit() function. Internally, function builds Stan code, builds data list, compiles fits model using cmdstanr package. Users can run steps one--one using coev_make_stancode() coev_make_standata() functions, brevity just use coev_fit() function. function takes several arguments, including dataset, named list variables like coevolve model (along associated response distributions), column dataset links phylogeny tip labels, phylogeny class phylo. function sets priors parameters default, possible user manually set priors. user can also pass additional arguments cmdstanr’s sample() method runs hood. model fitted, can print summary parameters. can see printed summary model parameters, including autoregressive effects (.e., effects variables future), cross effects (.e., effects variables variables future), amount drift, correlated drift, continuous time intercepts stochastic differential equation, ordinal cutpoints variables. summary output useful, difficult interpret parameters directly make inferences coevolutionary patterns. alternative approach directly “intervene” system. , can better understand increases decreases variable change equilibrium trait values variables system. example, can hold one variable average value increase standardised amount see equilibrium value trait changes. function coev_calculate_delta_theta() allows user calculate Δθz\\Delta\\theta_{z}, defined change equilibrium trait value one variable results median absolute deviation increase another variable. function returns posterior distribution. can easily visualise posterior distributions cross effects using function coev_plot_delta_theta().  plot shows posterior distribution, posterior median, 66% 95% credible intervals Δθz\\Delta\\theta_{z}. can conclude political religious authority influence evolution. one median absolute deviation increase political authority results increase equilibrium trait value religious authority, vice versa. words, two variables coevolve reciprocally time. several ways visualise runaway coevolutionary process: (1) flow field evolutionary change, (2) selection gradient plot, (3) time series simulation evolutionary dynamics. order make various plots understandable, useful first plot different taxa situated latent trait space. can using coev_plot_trait_values() function, produces pairs plot estimated trait values variables model (along associated posterior uncertainty diagonal).  Now good sense trait space, can plot flow field evolutionary change. coev_plot_flowfield() function plots strength direction evolutionary change different locations trait space.  arrows plot tend point towards upper right-hand corner, suggesting political religious authority evolve towards higher levels runaway coevolutionary process. can also visualise coevolutionary dynamics selection gradient plot. function coev_plot_selection_gradient() produces heatmap shows selection acts variables different locations trait space, green indicating positive selection red indicating negative selection.  can see plot variable increases, selection variable increases. Finally, can “replay past” simulating coevolutionary dynamics time series. default, coev_plot_pred_series() function uses model-implied ancestral states root phylogeny starting points, allows variables coevolve time. Shaded areas represent 95% credible intervals predictions.  also possible initialise variables different starting points, see implied coevolutionary dynamics. example, can imagine case ancestral society high levels political authority low levels religious authority.","code":"library(coevolve) head(authority$data) language political_authority religious_authority 1          Aiwoo            Sublocal            Sublocal 2          Alune          Supralocal          Supralocal 3 AnejomAneityum          Supralocal          Supralocal 4          Anuta               Local               Local 5          Atoni          Supralocal          Supralocal 6          Baree               Local               Local fit1 <-   coev_fit(     data = authority$data,     variables = list(       political_authority = \"ordered_logistic\",       religious_authority = \"ordered_logistic\"     ),     id = \"language\",     tree = authority$phylogeny,     # set manual prior     prior = list(A_offdiag = \"normal(0, 2)\"),     # return log likelihood     log_lik = TRUE,     # additional arguments for cmdstanr     parallel_chains = 4,     iter_sampling = 2000,     iter_warmup = 2000,     refresh = 0,     seed = 1   ) Running MCMC with 4 parallel chains...  Chain 2 finished in 878.0 seconds. Chain 4 finished in 1213.6 seconds. Chain 1 finished in 1228.8 seconds. Chain 3 finished in 1251.5 seconds.  All 4 chains finished successfully. Mean chain execution time: 1143.0 seconds. Total execution time: 1252.7 seconds. summary(fit1) Variables: political_authority = ordered_logistic             religious_authority = ordered_logistic       Data: authority$data (Number of observations: 97) Phylogeny: authority$phylogeny (Number of trees: 1)     Draws: 4 chains, each with iter = 2000; warmup = 2000; thin = 1            total post-warmup draws = 8000  Autoregressive selection effects:                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority    -0.67      0.52 -1.97 -0.03 1.00     5036     4459 religious_authority    -0.78      0.57 -2.13 -0.03 1.00     5461     3926  Cross selection effects:                                           Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority ⟶ religious_authority     2.28      0.99  0.34  4.26 1.00     3310     3706 religious_authority ⟶ political_authority     1.81      1.11 -0.36  4.08 1.00     2068     3963  Drift parameters:                                              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS sd(political_authority)                          1.93      0.82  0.25  3.45 1.00     1446     1572 sd(religious_authority)                          1.27      0.79  0.06  2.91 1.00     1478     3513 cor(political_authority,religious_authority)     0.26      0.31 -0.42  0.77 1.00     5593     6287  Continuous time intercept parameters:                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority     0.21      0.94 -1.65  2.01 1.00     8762     5444 religious_authority     0.21      0.94 -1.66  2.06 1.00     9553     5646  Ordinal cutpoint parameters:                        Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority[1]    -1.29      0.89 -3.03  0.51 1.00     5964     5452 political_authority[2]    -0.55      0.87 -2.22  1.20 1.00     6278     5920 political_authority[3]     1.65      0.91 -0.08  3.49 1.00     6729     6160 religious_authority[1]    -1.51      0.92 -3.30  0.29 1.00     6792     5557 religious_authority[2]    -0.82      0.90 -2.58  0.97 1.00     7241     6064 religious_authority[3]     1.60      0.93 -0.15  3.49 1.00     6983     6370 Warning: There were 18 divergent transitions after warmup. http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup coev_plot_delta_theta(fit1) coev_plot_trait_values(fit1, xlim = c(-5, 7), ylim = c(-5, 7)) coev_plot_flowfield(   object = fit1,   var1 = \"political_authority\",   var2 = \"religious_authority\",   limits = c(-5, 5)   ) coev_plot_selection_gradient(   object = fit1,   var1 = \"political_authority\",   var2 = \"religious_authority\",   limits = c(-5, 5) ) coev_plot_pred_series(fit1) coev_plot_pred_series(   object = fit1,   eta_anc = list(     political_authority = 5,     religious_authority = -5   ) )"},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"available-response-distributions","dir":"Articles","previous_headings":"","what":"Available response distributions","title":"Introduction to the coevolve package","text":"example, variables ordinal. , declared follow “ordered_logistic” response distribution. coevolve package supports several response distributions. Different variables need follow response distribution. can useful users like assess coevolution variables different types.","code":""},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"handling-missing-data","dir":"Articles","previous_headings":"","what":"Handling missing data","title":"Introduction to the coevolve package","text":"Often comparative datasets, data missing taxa. Rather remove cases missing data, coev_fit() function automatically impute missing values model, using available information. show modelling coevolutionary relationships brain weight group size across 21 primate species Lemuriformes clade. Data primate species compiled DeCasien et al. (2017). data 143 primate species total, focus one clade keep example small simple. variables positive reals, use “gamma_log” distribution. missing data brain weight variable, data missing group size variable. Notice number observations still 21 summary output, informing us observations retained missing data imputed. wanted instead remove taxa missing data, set complete_cases = TRUE fitting model.","code":"# filter dataset to Lemuriformes only primates_data <- primates$data[primates$data$clade == \"Lemuriformes\",]  # prune phylogeny to Lemuriformes only library(ape) primates_phylogeny <- keep.tip(primates$phylogeny, primates_data$species)  # view data head(primates_data[, c(\"species\", \"brain_weight\", \"group_size\")]) species brain_weight group_size 13                Avahi_laniger    10.251355   2.666667 14           Avahi_occidentalis     8.236200         NA 44           Cheirogaleus_major     6.119797   5.500000 45          Cheirogaleus_medius     2.912291   2.000000 54 Daubentonia_madagascariensis    46.344725   1.750000 56            Eulemur_coronatus    21.394398   6.950000 fit2 <-   coev_fit(     data = primates_data,     variables = list(       brain_weight = \"gamma_log\",       group_size = \"gamma_log\"     ),     id = \"species\",     tree = primates_phylogeny,     # additional arguments for cmdstanr     parallel_chains = 4,     iter_sampling = 2000,     iter_warmup = 2000,     refresh = 0,     seed = 1   ) Running MCMC with 4 parallel chains...  Chain 1 finished in 459.8 seconds. Chain 3 finished in 477.3 seconds. Chain 2 finished in 607.5 seconds. Chain 4 finished in 634.7 seconds.  All 4 chains finished successfully. Mean chain execution time: 544.8 seconds. Total execution time: 634.8 seconds. summary(fit2) Variables: brain_weight = gamma_log             group_size = gamma_log       Data: primates_data (Number of observations: 21) Phylogeny: primates_phylogeny (Number of trees: 1)     Draws: 4 chains, each with iter = 2000; warmup = 2000; thin = 1            total post-warmup draws = 8000  Autoregressive selection effects:              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS brain_weight    -0.42      0.35 -1.34 -0.01 1.00     5998     3875 group_size      -0.77      0.54 -2.01 -0.04 1.00     6044     3424  Cross selection effects:                           Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS brain_weight ⟶ group_size     0.46      0.72 -1.12  1.76 1.00     2799     2861 group_size ⟶ brain_weight     0.62      0.94 -1.29  2.41 1.00     3113     3754  Drift parameters:                              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS sd(brain_weight)                 1.07      0.22  0.67  1.56 1.00     2112     2198 sd(group_size)                   0.69      0.44  0.04  1.66 1.01      784     1713 cor(brain_weight,group_size)     0.06      0.30 -0.53  0.62 1.00     7637     5552  Continuous time intercept parameters:              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS brain_weight    -0.25      0.85 -1.88  1.41 1.00     5417     5515 group_size      -0.87      0.76 -2.32  0.66 1.00     5891     5285  Shape parameters:              Estimate Est.Error 2.5%  97.5% Rhat Bulk_ESS Tail_ESS brain_weight    57.29     60.33 4.83 223.56 1.01      573     1593 group_size       5.99     12.12 1.43  28.40 1.01      826      784 Warning: There were 91 divergent transitions after warmup. http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup"},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"repeated-observations","dir":"Articles","previous_headings":"","what":"Repeated observations","title":"Introduction to the coevolve package","text":"Another common feature comparative datasets repeated observations. previous examples, one observation per taxon. often one observation taxon, observed multiple individuals species. cases, can useful include observations model estimate residual variation due coevolutionary process. show using example dataset de Villemereuil & Nakagawa (2014). Suppose measured two continuous variables (xx yy) 20 species, five observations species. can fit dynamic coevolutionary model dataset. model output, can see coev_fit() detected presence repeated observations consequently modelled residual standard deviation residual correlation parameters xx yy.","code":"head(repeated$data) species         x         y 1    sp_1 11.223724 107.41919 2    sp_1  9.805934 109.16403 3    sp_1 10.308423  91.88672 4    sp_1  8.355349 121.54341 5    sp_1 11.854510 105.31638 6    sp_2  4.314015  64.99859 fit3 <-   coev_fit(     data = repeated$data,     variables = list(       x = \"normal\",       y = \"normal\"     ),     id = \"species\",     tree = repeated$phylogeny,     # additional arguments for cmdstanr     parallel_chains = 4,     iter_warmup = 2000,     iter_sampling = 2000,     refresh = 0,     seed = 1   ) Running MCMC with 4 parallel chains...  Chain 2 finished in 605.4 seconds. Chain 4 finished in 624.9 seconds. Chain 3 finished in 851.5 seconds. Chain 1 finished in 852.4 seconds.  All 4 chains finished successfully. Mean chain execution time: 733.5 seconds. Total execution time: 852.4 seconds. summary(fit3) Variables: x = normal             y = normal       Data: repeated$data (Number of observations: 100) Phylogeny: repeated$phylogeny (Number of trees: 1)     Draws: 4 chains, each with iter = 2000; warmup = 2000; thin = 1            total post-warmup draws = 8000  Autoregressive selection effects:   Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS x    -1.57      0.77 -3.18 -0.20 1.00     3920     2089 y    -1.32      0.71 -2.78 -0.12 1.00     4906     3238  Cross selection effects:       Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS x ⟶ y     0.42      0.85 -1.25  2.07 1.00     6608     5754 y ⟶ x     0.03      0.87 -1.71  1.73 1.00     6875     5415  Drift parameters:          Estimate Est.Error 2.5% 97.5% Rhat Bulk_ESS Tail_ESS sd(x)        2.94      0.32 2.37  3.63 1.00     4183     5327 sd(y)        2.58      0.29 2.05  3.20 1.00     4666     5667 cor(x,y)     0.88      0.06 0.72  0.96 1.00     3234     4999  Continuous time intercept parameters:   Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS x    -0.03      0.79 -1.59  1.51 1.00     6792     6144 y     0.06      0.78 -1.51  1.58 1.00     7337     5761  Residual parameters:          Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS sd(x)        0.28      0.02  0.23  0.33 1.00     8310     5374 sd(y)        0.29      0.02  0.25  0.34 1.00     8427     5323 cor(x,y)    -0.18      0.11 -0.38  0.03 1.00     7568     5759 Warning: There were 36 divergent transitions after warmup. http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup"},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"using-multiphylo-tree-objects","dir":"Articles","previous_headings":"","what":"Using multiPhylo tree objects","title":"Introduction to the coevolve package","text":"Often, like average analysis posterior set phylogenetic trees, rather use single tree. can useful way account phylogenetic uncertainty inferences. deal phylogenetic uncertainty, coev_fit() function allows user declare multiPhylo objects tree argument. long trees multiPhylo object number taxa tip labels, Stan code average trees within model. keep computation time short, imagine simple case multiPhylo object two identical Austronesian language phylogenies. results case phylogenetic uncertainty, users expect differing results using sets different trees. summary output correctly shows averaged two trees. Note trees, users expect computation time models increase.","code":"authority_multiphylo <- c(   authority$phylogeny,   authority$phylogeny )  authority_multiphylo 2 phylogenetic trees fit4 <-   coev_fit(     data = authority$data,     variables = list(       political_authority = \"ordered_logistic\",       religious_authority = \"ordered_logistic\"     ),     id = \"language\",     # use multiPhylo tree object     tree = authority_multiphylo,     # set manual prior     prior = list(A_offdiag = \"normal(0, 2)\"),     # additional arguments for cmdstanr     parallel_chains = 4,     iter_sampling = 2000,     iter_warmup = 2000,     refresh = 0,     seed = 1   ) Running MCMC with 4 parallel chains...  Chain 4 finished in 1598.6 seconds. Chain 3 finished in 1625.2 seconds. Chain 2 finished in 1633.5 seconds. Chain 1 finished in 2088.5 seconds.  All 4 chains finished successfully. Mean chain execution time: 1736.5 seconds. Total execution time: 2088.7 seconds. summary(fit4) Variables: political_authority = ordered_logistic             religious_authority = ordered_logistic       Data: authority$data (Number of observations: 97) Phylogeny: authority_multiphylo (Number of trees: 2)     Draws: 4 chains, each with iter = 2000; warmup = 2000; thin = 1            total post-warmup draws = 8000  Autoregressive selection effects:                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority    -0.64      0.52 -1.95 -0.02 1.00     5950     3489 religious_authority    -0.70      0.55 -2.07 -0.03 1.00     6287     4187  Cross selection effects:                                           Estimate Est.Error 2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority ⟶ religious_authority     2.05      1.03 0.37  4.34 1.00     2690     5116 religious_authority ⟶ political_authority     2.12      1.08 0.26  4.47 1.00     2419     3669  Drift parameters:                                              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS sd(political_authority)                          1.11      0.83  0.04  2.94 1.00      910     2354 sd(religious_authority)                          0.88      0.68  0.03  2.50 1.00     1456     2887 cor(political_authority,religious_authority)     0.05      0.33 -0.60  0.66 1.00     4522     5683  Continuous time intercept parameters:                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority     0.34      0.91 -1.43  2.11 1.00     9445     6549 religious_authority     0.42      0.92 -1.40  2.18 1.00    10164     5564  Ordinal cutpoint parameters:                        Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority[1]    -1.55      0.90 -3.36  0.15 1.00     6041     5141 political_authority[2]    -0.81      0.88 -2.59  0.85 1.00     6578     5453 political_authority[3]     1.92      0.95  0.11  3.83 1.00     7628     5767 religious_authority[1]    -1.83      0.88 -3.62 -0.13 1.00     6347     5593 religious_authority[2]    -1.15      0.85 -2.87  0.52 1.00     7035     5596 religious_authority[3]     1.67      0.93 -0.06  3.61 1.00     4677     4682 Warning: There were 18 divergent transitions after warmup. http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup"},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"controlling-for-spatial-location","dir":"Articles","previous_headings":"","what":"Controlling for spatial location","title":"Introduction to the coevolve package","text":"data spatial location taxa, sometimes useful control spatial location ensure model capturing deep ancestral relationships rather recent diffusion among neighbours. example, studying coevolution political religious authority Austronesian societies, like ensure results due coevolution deep cultural time rather recent borrowing among societies close geographic proximity. dist_mat argument coev_fit() function allows us easily control spatial proximity. argument takes distance matrix taxa phylogeny. distance matrix specified user, function includes Stan code separate Gaussian Process spatial location variable model. geographic distance matrix (measured metres) first five Austronesian societies: can include distance matrix model. matrix scaled vary 0 1 hood improve model sampling. summary output shows model estimated parameters two Gaussian Process functions geographic locations, one variable.","code":"authority$distance_matrix[1:5, 1:5] Aiwoo     Alune AnejomAneityum     Anuta     Atoni Aiwoo                0.0 4250625.9      1158010.2  408692.9 4602028.5 Alune          4250625.9       0.0      4863176.7 4649868.1  865094.2 AnejomAneityum 1158010.2 4863176.7            0.0  951671.2 5013641.1 Anuta           408692.9 4649868.1       951671.2       0.0 4977783.9 Atoni          4602028.5  865094.2      5013641.1 4977783.9       0.0 fit5 <-   coev_fit(     data = authority$data,     variables = list(       political_authority = \"ordered_logistic\",       religious_authority = \"ordered_logistic\"     ),     id = \"language\",     tree = authority$phylogeny,     # declare distance matrix and covariance kernel     dist_mat = authority$distance_matrix,     dist_cov = \"exp_quad\",     # set manual prior     prior = list(A_offdiag = \"normal(0, 2)\"),     # return log likelihood     log_lik = TRUE,     # additional arguments for cmdstanr     parallel_chains = 4,     iter_sampling = 2000,     iter_warmup = 2000,     refresh = 0,     seed = 1   ) Running MCMC with 4 parallel chains... Chain 3 finished in 1566.6 seconds. Chain 1 finished in 1660.9 seconds. Chain 4 finished in 2080.0 seconds. Chain 2 finished in 2086.5 seconds.  All 4 chains finished successfully. Mean chain execution time: 1848.5 seconds. Total execution time: 2086.7 seconds. summary(fit5) Variables: political_authority = ordered_logistic             religious_authority = ordered_logistic       Data: authority$data (Number of observations: 97) Phylogeny: authority$phylogeny (Number of trees: 1)     Draws: 4 chains, each with iter = 2000; warmup = 2000; thin = 1            total post-warmup draws = 8000  Autoregressive selection effects:                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority    -0.69      0.54 -1.99 -0.03 1.00     5230     3961 religious_authority    -0.77      0.58 -2.15 -0.03 1.00     5743     3919  Cross selection effects:                                           Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority ⟶ religious_authority     2.02      1.19 -0.45  4.34 1.00     2142     2494 religious_authority ⟶ political_authority     1.65      1.23 -0.81  4.06 1.00     2656     3526  Drift parameters:                                              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS sd(political_authority)                          1.52      0.80  0.11  3.11 1.00     1181     2182 sd(religious_authority)                          1.02      0.69  0.05  2.54 1.00     1427     2927 cor(political_authority,religious_authority)     0.16      0.33 -0.51  0.74 1.00     5589     5523  Continuous time intercept parameters:                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority     0.32      0.94 -1.52  2.16 1.00     8469     5212 religious_authority     0.30      0.97 -1.60  2.17 1.00     7767     5844  Ordinal cutpoint parameters:                        Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS political_authority[1]    -1.49      0.98 -3.41  0.44 1.00     5038     5486 political_authority[2]    -0.77      0.96 -2.64  1.16 1.00     4991     5665 political_authority[3]     1.38      1.01 -0.58  3.42 1.00     4106     5215 religious_authority[1]    -1.62      1.01 -3.58  0.38 1.00     6003     5297 religious_authority[2]    -0.96      1.00 -2.84  1.01 1.00     6071     5604 religious_authority[3]     1.46      1.04 -0.52  3.56 1.00     5740     5616  Gaussian Process parameters for distances:                           Estimate Est.Error 2.5% 97.5% Rhat Bulk_ESS Tail_ESS rho(political_authority)      0.05      0.09 0.00  0.33 1.00     1110     2047 rho(religious_authority)      0.06      0.11 0.00  0.39 1.00      626     2322 sdgp(political_authority)     1.82      1.21 0.16  4.73 1.00     1871     1720 sdgp(religious_authority)     2.12      1.40 0.16  5.34 1.01     1185     2182 Warning: There were 630 divergent transitions after warmup. http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup"},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"model-comparison","dir":"Articles","previous_headings":"","what":"Model comparison","title":"Introduction to the coevolve package","text":"set log_lik = TRUE, underlying Stan code models returns log likelihood vector observations. , possible compare different models using methods like approximate leave-one-cross-validation. example, can use loo_compare() function loo package see whether adding distance matrix authority example improved --sample predictive accuracy. model comparison suggests adding spatial location model improve --sample predictive accuracy. model comparison approach may also useful comparing models different cross selection effects constrained zero (see effects_mat argument coev_fit() function). user can test whether “turning ” particular cross selection effect improves model fit. However, currently possible compare models include different coevolving variables, datasets resulting log likelihood vectors vary models.","code":"library(loo) loo_compare(   list(     fit1 = fit1$fit$loo(), # authority model without distance matrix     fit5 = fit5$fit$loo()  # authority model with distance matrix   ) ) elpd_diff se_diff fit5  0.0       0.0    fit1 -1.9       2.8"},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to the coevolve package","text":"hope package useful addition phylogenetic comparative methods toolkit. questions package, please feel free email Scott Claessens (scott.claessens@gmail.com) Erik Ringen (erikjacob.ringen@uzh.ch) raise issue GitHub: https://github.com/ScottClaessens/coevolve/issues","code":""},{"path":"https://scottclaessens.github.io/coevolve/articles/coevolve.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to the coevolve package","text":"DeCasien, . R., Williams, S. ., & Higham, J. P. (2017). Primate brain size predicted diet sociality. Nature Ecology & Evolution, 1(5), 0112. de Villemereuil P. & Nakagawa, S. (2014). General quantitative genetic methods comparative biology. L. Garamszegi (Ed.), Modern phylogenetic comparative methods application evolutionary biology: concepts practice (pp. 287-303). Springer, New York. Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45.","code":""},{"path":"https://scottclaessens.github.io/coevolve/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Claessens. Author, maintainer. Erik Ringen. Author.","code":""},{"path":"https://scottclaessens.github.io/coevolve/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Claessens S, Ringen E (2024). coevolve: Fit Bayesian Generalized Dynamic Phylogenetic Models using 'Stan'. R package version 0.0.0.9021, https://scottclaessens.github.io/coevolve/, https://github.com/ScottClaessens/coevolve.","code":"@Manual{,   title = {coevolve: Fit Bayesian Generalized Dynamic Phylogenetic Models using 'Stan'},   author = {Scott Claessens and Erik Ringen},   year = {2024},   note = {R package version 0.0.0.9021, https://scottclaessens.github.io/coevolve/},   url = {https://github.com/ScottClaessens/coevolve}, }"},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fit Bayesian Generalized Dynamic Phylogenetic Models using Stan","text":"coevolve package allows user fit Bayesian generalized dynamic phylogenetic models Stan. models can used estimate variables coevolved evolutionary time assess causal directionality (X → Y vs. Y → X) contingencies (X, Y) evolution. existing methods allow pairs binary traits coevolve (e.g., BayesTraits), coevolve package allows users include multiple traits different data types, including binary, ordinal, count, continuous traits.","code":""},{"path":"https://scottclaessens.github.io/coevolve/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fit Bayesian Generalized Dynamic Phylogenetic Models using Stan","text":"use coevolve package, must first install cmdstanr package (see full installation instructions : https://mc-stan.org/cmdstanr/). can install development version coevolve :","code":"install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\"))) # install.packages(\"devtools\") devtools::install_github(\"ScottClaessens/coevolve\")"},{"path":"https://scottclaessens.github.io/coevolve/index.html","id":"how-to-use-coevolve","dir":"","previous_headings":"","what":"How to use coevolve","title":"Fit Bayesian Generalized Dynamic Phylogenetic Models using Stan","text":"example, analyse coevolution political religious authority 97 Austronesian societies. data compiled analysed Sheehan et al. (2023). variables four-level ordinal variables reflecting increasing levels authority. use phylogeny Austronesian languages assess patterns coevolution. results can investigated using: summary provides general information model details posterior draws model parameters. particular, output shows autoregressive selection effects (.e., effect variable future), cross selection effects (.e., effect variable another variable future), amount drift, continuous time intercept parameters stochastic differential equation, cutpoints ordinal variables. summary output useful first glance, difficult interpret parameters directly infer directions coevolution. Another approach “intervene” system. can hold variables interest average values increase one variable standardised amount see affects optimal trait value another variable. coev_plot_delta_theta() function allows us visualise Δθz\\Delta\\theta_{z} variable pairs model. Δθz\\Delta\\theta_{z} defined change optimal trait value one variable results one median absolute deviation increase another variable.  plot suggests variables influence one another coevolution. standardised increase political authority results increase optimal trait value religious authority, vice versa. words, two variables reciprocally coevolve evolutionary time.","code":"library(coevolve) fit <-   coev_fit(     data = authority$data,     variables = list(       political_authority = \"ordered_logistic\",       religious_authority = \"ordered_logistic\"     ),     id = \"language\",     tree = authority$phylogeny,     # manually set prior     prior = list(A_offdiag = \"normal(0, 2)\"),     # arguments for cmdstanr     parallel_chains = 4,     refresh = 0,     seed = 1   ) #> Running MCMC with 4 parallel chains... #>  #> Chain 1 finished in 441.6 seconds. #> Chain 2 finished in 582.9 seconds. #> Chain 3 finished in 621.8 seconds. #> Chain 4 finished in 626.9 seconds. #>  #> All 4 chains finished successfully. #> Mean chain execution time: 568.3 seconds. #> Total execution time: 627.2 seconds. #> Warning: 22 of 4000 (1.0%) transitions ended with a divergence. #> See https://mc-stan.org/misc/warnings for details. summary(fit) #> Variables: political_authority = ordered_logistic  #>            religious_authority = ordered_logistic  #>      Data: authority$data (Number of observations: 97) #> Phylogeny: authority$phylogeny (Number of trees: 1) #>     Draws: 4 chains, each with iter = 1000; warmup = 1000; thin = 1 #>            total post-warmup draws = 4000 #>  #> Autoregressive selection effects: #>                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS #> political_authority    -0.67      0.53 -1.99 -0.03 1.00     2120     1768 #> religious_authority    -0.78      0.59 -2.20 -0.03 1.00     2260     1766 #>  #> Cross selection effects: #>                                           Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS #> political_authority ⟶ religious_authority     2.32      1.03  0.38  4.45 1.00     1567     1971 #> religious_authority ⟶ political_authority     1.82      1.11 -0.28  4.07 1.00     1288     2124 #>  #> Drift parameters: #>                                              Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS #> sd(political_authority)                          1.95      0.83  0.27  3.50 1.01      801     1193 #> sd(religious_authority)                          1.29      0.80  0.06  2.94 1.00      761     1327 #> cor(political_authority,religious_authority)     0.26      0.32 -0.44  0.78 1.00     2732     2641 #>  #> Continuous time intercept parameters: #>                     Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS #> political_authority     0.21      0.95 -1.56  2.09 1.00     4088     1162 #> religious_authority     0.21      0.94 -1.65  2.06 1.00     5112     2655 #>  #> Ordinal cutpoint parameters: #>                        Estimate Est.Error  2.5% 97.5% Rhat Bulk_ESS Tail_ESS #> political_authority[1]    -1.31      0.91 -3.12  0.51 1.00     2736     2683 #> political_authority[2]    -0.56      0.89 -2.32  1.24 1.00     3129     2891 #> political_authority[3]     1.64      0.92 -0.10  3.55 1.00     3268     2956 #> religious_authority[1]    -1.53      0.92 -3.31  0.24 1.00     3019     3066 #> religious_authority[2]    -0.84      0.90 -2.59  0.94 1.00     3329     3051 #> religious_authority[3]     1.60      0.95 -0.17  3.51 1.00     3205     3102 #> Warning: There were 22 divergent transitions after warmup. #> http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup coev_plot_delta_theta(fit) #> Warning: Removed 235 rows containing non-finite outside the scale range (`stat_density()`)."},{"path":"https://scottclaessens.github.io/coevolve/index.html","id":"citing-coevolve","dir":"","previous_headings":"","what":"Citing coevolve","title":"Fit Bayesian Generalized Dynamic Phylogenetic Models using Stan","text":"using coevolve package, please cite following papers: Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution “complex” societies. EcoEvoRXiv. https://doi.org/10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. https://doi.org/10.1038/s41562-022-01471-y","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/authority.html","id":null,"dir":"Reference","previous_headings":"","what":"Political and religious authority in Austronesian societies — authority","title":"Political and religious authority in Austronesian societies — authority","text":"dataset associated phylogeny describes states political religious authority 97 Austronesian societies. data originally compiled Sheehan et al. (2023). Political authority defined right manage interactions living human beings, whereas religious authority defined right manage interactions living human beings supernatural agents powers. Authority coded absent, sublocal (smaller local community), local (coextensive local community), supralocal (consisting one local community).","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/authority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Political and religious authority in Austronesian societies — authority","text":"","code":"authority"},{"path":"https://scottclaessens.github.io/coevolve/reference/authority.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Political and religious authority in Austronesian societies — authority","text":"list containing dataset, associated language phylogeny, associated distance matrix. phylogeny pruned maximum clade credibility tree 97 Austronesian languages. distance matrix matrix distances (metres) 97 Austronesian societies. dataset data frame 97 observations three variables: language name Austronesian language linked society political_authority ordered factor indicating whether political authority absent, sublocal, local, supralocal society religious_authority ordered factor indicating whether religious authority absent, sublocal, local, supralocal society","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/authority.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Political and religious authority in Austronesian societies — authority","text":"Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/authority.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Political and religious authority in Austronesian societies — authority","text":"","code":"if (FALSE) { # \\dontrun{ # fit model to authority data m <-   coev_fit(     data = authority$data,     variables = list(       political_authority = \"ordered_logistic\",       religious_authority = \"ordered_logistic\"     ),     id = \"language\",     tree = authority$phylogeny,     # arguments for cmdstanr::sample()     parallel_chains = 4,     seed = 1,     # set prior manually     prior = list(A_offdiag = \"normal(0, 2)\")   ) # print model summary summary(m) # plot delta theta coev_plot_delta_theta(m) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"Calculate \\(\\Delta\\theta\\) fitted coevfit object. \\(\\Delta\\theta\\) defined difference equilibrium value \"response\" trait results standardised increase value another \"predictor\" trait. value can used assess contingencies directionality variables coevolutionary process.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"","code":"coev_calculate_delta_theta(object, response, predictor)"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"object object class coevfit response character string equal one coevolving variables model predictor character string equal one coevolving variables model","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"Posterior samples draws_array format","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"function calculates \\(\\Delta\\theta\\), defined difference equilibrium value \"response\" trait results standardised increase value another \"predictor\" trait. function first calculates equilibrium trait value response trait predictor trait held empirical median value (coev_calculate_theta function used purpose, see help(coev_calculate_theta) details). function calculates equilibrium trait value response variable increasing predictor trait median one median absolute deviation. function returns posterior difference values. resulting \\(\\Delta\\theta\\) samples can used infer whether increases one trait positive negative selective effect another trait model.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_delta_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate delta theta from a fitted coevfit object — coev_calculate_delta_theta","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # calculate delta theta coev_calculate_delta_theta(   object = fit,   response = \"political_authority\",   predictor = \"religious_authority\"   ) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"Calculate equilibrium trait values \\(\\theta\\) one traits given set intervention values traits fitted coevfit object.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"","code":"coev_calculate_theta(object, intervention_values = NULL)"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"object object class coevfit intervention_values Either NULL (default) named list variables associated intervention values calculating equilibrium trait values. NULL, calculates equilibrium states parameters free vary. Otherwise, coevolving variables must declared separately named list without repetition. intervention value particular variable set NA, variable treated free variable. intervention value particular variable specified, variable held constant trait value calculation. least one variable must declared free variable least one variable must held constant (e.g., list(var1 = NA, var2 = 0)).","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"Posterior samples matrix format","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"equilibrium trait values freely evolving traits \\(\\mathbf{\\eta}\\) calculated using following formula: $$\\mathbf{\\theta} = -\\mathbf{}^{-1}\\mathbf{b}$$ hold variables constant value(s) (denoted \\(\\eta_{h}\\)) let others evolve freely (denoted \\(\\eta_{f}\\)), can partition parameters follows: \\(\\mathbf{}_{ff}\\): selection coefficients /free variables \\(\\mathbf{}_{fh}\\): selection coefficients free variables held variables \\(\\mathbf{b}_{f}\\): continuous time intercepts free variables can calculate equilibrium values free variables: $$\\boldsymbol{\\theta_f} = -\\mathbf{}_{ff}^{-1} \\left( \\mathbf{}_{fh}   \\mathbf{\\eta}_h + \\mathbf{b}_f \\right)$$ overall equilibrium vector mix free equilibria held values: $$\\boldsymbol{\\theta | \\mathbf{\\eta}_h} = \\begin{bmatrix}   \\boldsymbol{\\theta}_f \\\\\\mathbf{\\eta}_h\\end{bmatrix}$$","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_calculate_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate equilibrium trait values (theta) for a fitted coevfit object — coev_calculate_theta","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # calculate theta with no interventions coev_calculate_theta(   object = fit  )  # calculate theta given intervention values coev_calculate_theta(   object = fit,   intervention_values = list(     political_authority = NA,     religious_authority = 0     )   ) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"Fit Bayesian dynamic coevolutionary models Stan full Bayesian inference. model allows users assess causal directionality (X -> Y vs. Y -> X) contingencies (X, Y) evolution. Several data types supported, including binary, ordinal, count, continuous, positive real variables. model can additionally account missing data, repeated observations, controls spatial proximity. Model fit can assessed compared posterior predictive checks cross-validation.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"","code":"coev_fit(   data,   variables,   id,   tree,   effects_mat = NULL,   complete_cases = FALSE,   dist_mat = NULL,   dist_cov = \"exp_quad\",   measurement_error = NULL,   prior = NULL,   scale = TRUE,   estimate_Q_offdiag = TRUE,   estimate_residual = TRUE,   log_lik = FALSE,   prior_only = FALSE,   adapt_delta = 0.95,   ... )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"data object class data.frame (one can coerced class) containing data variables used model. variables named list identifying variables coevolve model associated response distributions character strings (e.g. list(var1 = \"bernoulli_logit\", var2 = \"ordered_logistic\")). Must identify least two variables. Variable names must refer valid column names data. Currently, supported response distributions bernoulli_logit, ordered_logistic, poisson_softplus, negative_binomial_softplus, normal, gamma_log. id character length one identifying variable data links rows tips phylogeny. Must refer valid column name data. id column must exactly match tip labels phylogeny. tree phylogenetic tree object class phylo multiPhylo. tree(s) must rooted must include positive non-zero branch lengths. trees multiPhylo objects must number internal nodes branches. effects_mat (optional) boolean matrix row column names exactly matching variables declared model. specified, cross-lagged effects estimated model. specified, model estimate cross-lagged effects cells matrix TRUE ignore cross-lagged effects cells matrix FALSE. matrix, columns represent predictor variables rows represent outcome variables. autoregressive effects (e.g., X -> X) must TRUE matrix. complete_cases (optional) Logical. FALSE (default), missing values imputed model. TRUE, taxa missing data excluded. dist_mat (optional) distance matrix row column names exactly matching tip labels phylogeny. specified, model additionally control spatial location including separate Gaussian Process locations every coevolving variable model. dist_cov string specifying covariance kernel used Gaussian Processes locations. Currently supported \"exp_quad\" (exponentiated-quadratic kernel; default), \"exponential\" (exponential kernel), \"matern32\" (Matern 3/2 kernel). measurement_error (optional) named list coevolving variables associated columns dataset containing standard errors. valid normally-distributed variables. example, declare variables = list(x = \"normal\", y = \"normal\"), set measurement_error = list(x = \"x_std_err\") tell function include measurement error x using standard errors x_std_err column dataset. prior (optional) named list priors model. specified, model uses default priors (see help(coev_fit)). Alternatively, user can specify named list priors. list must contain non-duplicated entries following parameters: autoregressive effects (A_diag), cross effects (A_offdiag), Cholesky factor drift matrix (L_R), drift std. dev. parameters (Q_sigma), continuous time intercepts (b), ancestral states traits (eta_anc), cutpoints ordinal variables (c), overdispersion parameters negative binomial variables (phi), shape parameters gamma variables (shape), sigma parameters Gaussian Processes locations (sigma_dist), rho parameters Gaussian Processes locations (rho_dist), residual standard deviations repeated observations (sigma_residual), Cholesky factor residual correlations repeated observations (L_residual). must entered valid prior strings, e.g. list(A_offdiag = \"normal(0, 2)\"). Invalid prior strings throw error function internally checks syntax resulting Stan code. scale Logical. TRUE (default), variables following normal gamma_log response distributions scaled fitting model. Continuous variables following normal distribution standardised (e.g., mean centered divided standard deviation) positive real variables following gamma_log distribution divided mean value without centering. approach recommended using default priors improve efficiency ensure accurate inferences. FALSE, variables left unscaled model fitting. case, users take care set sensible priors variables. estimate_Q_offdiag Logical. TRUE (default), model estimates -diagonals \\(Q\\) drift matrix (.e., correlated drift). FALSE, -diagonals \\(Q\\) drift matrix set zero. estimate_residual Logical. TRUE (default), model estimates residual standard deviations residual correlations repeated observations taxa. FALSE, residual standard deviations residual correlations estimated. latter may preferable cases repeated observations sparse (e.g., taxa repeated observations). argument applies repeated observations present data. log_lik Logical. Set FALSE default. TRUE, model returns pointwise log likelihood, can used calculate WAIC LOO. prior_only Logical. FALSE (default), model fitted data returns posterior distribution. TRUE, model samples prior , ignoring likelihood. adapt_delta Argument cmdstanr::sample(). Default 0.95. ... Additional arguments cmdstanr::sample().","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"Fitted model class coevfit.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"coev_fit function generates Stan code model, generates data list, compiles fits model using cmdstanr package. Fit Bayesian dynamic coevolutionary model Stan. general overview provided vignette vignette(\"coevolve\") Available response distributions Variables coevolve model declared variables argument, using named list associated response distributions. example: list(x = \"bernoulli_logit\", y =   \"ordered_logistic\"). Currently, supported response distributions bernoulli_logit, ordered_logistic, poisson_softplus, negative_binomial_softplus, normal, gamma_log. Default prior distributions priors explicitly declared user, default priors used. Default priors chosen weakly regularising, improves model fitting conservatism parameter estimates. Default priors Stan parameters follows: A_diag (autoregressive effects) = std_normal() A_offdiag (cross effects) = std_normal() L_R (Cholesky factor drift matrix) = lkj_corr_cholesky(4) Q_sigma (drift std. dev. parameters) = std_normal() b (continuous time intercepts) = std_normal() eta_anc (trait ancestral states) = std_normal() c (ordinal cutpoints) = normal(0, 2) shape (shape parameters gamma distributions) = gamma(0.01, 0.01) sigma_dist (sigma Gaussian process locations) = exponential(1) rho_dist (rho Gaussian process locations) = exponential(5) sigma_residual (residual standard deviations) = exponential(1) L_residual (Cholesky factor residual correlations) = lkj_corr_cholesky(4) default prior phi (overdispersion parameter negative-binomial distribution) scaled automatically based variance data. recommend users assess suitability default priors fitting model prior_only = TRUE plotting prior predictive checks variables using coev_plot_predictive_check() function. Handling missing data order retain information, coev_fit() function automatically imputes missing values. turn behaviour exclude taxa missing data, set complete_cases = FALSE. Dealing repeated observations taxa appear dataset multiple times (.e., repeated observations), model automatically estimate residual standard deviations residual correlations capture within-taxa variation due coevolutionary process. turn behaviour, set estimate_residual = FALSE. Incorporating measurement error normally-distributed coevolving variables measured error, user can pass standard errors one variables model measurement_error argument. Controlling spatial location users declare distance matrix dist_mat argument, model include several Gaussian processes (one per coevolving variable) spatial locations.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Bayesian dynamic coevolutionary model in Stan — coev_fit","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # print model summary summary(fit) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"Make Stan code Bayesian dynamic coevolutionary model. Stan code generated, checked syntactical errors, returned character string.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"","code":"coev_make_stancode(   data,   variables,   id,   tree,   effects_mat = NULL,   complete_cases = FALSE,   dist_mat = NULL,   dist_cov = \"exp_quad\",   measurement_error = NULL,   prior = NULL,   scale = TRUE,   estimate_Q_offdiag = TRUE,   estimate_residual = TRUE,   log_lik = FALSE,   prior_only = FALSE )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"data object class data.frame (one can coerced class) containing data variables used model. variables named list identifying variables coevolve model associated response distributions character strings (e.g. list(var1 = \"bernoulli_logit\", var2 = \"ordered_logistic\")). Must identify least two variables. Variable names must refer valid column names data. Currently, supported response distributions bernoulli_logit, ordered_logistic, poisson_softplus, negative_binomial_softplus, normal, gamma_log. id character length one identifying variable data links rows tips phylogeny. Must refer valid column name data. id column must exactly match tip labels phylogeny. tree phylogenetic tree object class phylo multiPhylo. tree(s) must rooted must include positive non-zero branch lengths. trees multiPhylo objects must number internal nodes branches. effects_mat (optional) boolean matrix row column names exactly matching variables declared model. specified, cross-lagged effects estimated model. specified, model estimate cross-lagged effects cells matrix TRUE ignore cross-lagged effects cells matrix FALSE. matrix, columns represent predictor variables rows represent outcome variables. autoregressive effects (e.g., X -> X) must TRUE matrix. complete_cases (optional) Logical. FALSE (default), missing values imputed model. TRUE, taxa missing data excluded. dist_mat (optional) distance matrix row column names exactly matching tip labels phylogeny. specified, model additionally control spatial location including separate Gaussian Process locations every coevolving variable model. dist_cov string specifying covariance kernel used Gaussian Processes locations. Currently supported \"exp_quad\" (exponentiated-quadratic kernel; default), \"exponential\" (exponential kernel), \"matern32\" (Matern 3/2 kernel). measurement_error (optional) named list coevolving variables associated columns dataset containing standard errors. valid normally-distributed variables. example, declare variables = list(x = \"normal\", y = \"normal\"), set measurement_error = list(x = \"x_std_err\") tell function include measurement error x using standard errors x_std_err column dataset. prior (optional) named list priors model. specified, model uses default priors (see help(coev_fit)). Alternatively, user can specify named list priors. list must contain non-duplicated entries following parameters: autoregressive effects (A_diag), cross effects (A_offdiag), Cholesky factor drift matrix (L_R), drift std. dev. parameters (Q_sigma), continuous time intercepts (b), ancestral states traits (eta_anc), cutpoints ordinal variables (c), overdispersion parameters negative binomial variables (phi), shape parameters gamma variables (shape), sigma parameters Gaussian Processes locations (sigma_dist), rho parameters Gaussian Processes locations (rho_dist), residual standard deviations repeated observations (sigma_residual), Cholesky factor residual correlations repeated observations (L_residual). must entered valid prior strings, e.g. list(A_offdiag = \"normal(0, 2)\"). Invalid prior strings throw error function internally checks syntax resulting Stan code. scale Logical. TRUE (default), variables following normal gamma_log response distributions scaled fitting model. Continuous variables following normal distribution standardised (e.g., mean centered divided standard deviation) positive real variables following gamma_log distribution divided mean value without centering. approach recommended using default priors improve efficiency ensure accurate inferences. FALSE, variables left unscaled model fitting. case, users take care set sensible priors variables. estimate_Q_offdiag Logical. TRUE (default), model estimates -diagonals $$Q$$ drift matrix (.e., correlated drift). FALSE, -diagonals $$Q$$ drift matrix set zero. estimate_residual Logical. TRUE (default), model estimates residual standard deviations residual correlations repeated observations taxa. FALSE, residual standard deviations residual correlations estimated. latter may preferable cases repeated observations sparse (e.g., taxa repeated observations). argument applies repeated observations present data. log_lik Logical. Set FALSE default. TRUE, model returns pointwise log likelihood, can used calculate WAIC LOO. prior_only Logical. FALSE (default), model fitted data returns posterior distribution. TRUE, model samples prior , ignoring likelihood.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"character string containing Stan code fit dynamic coevolutionary model.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"details, see help(coev_fit)","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_stancode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Stan code for dynamic coevolutionary model — coev_make_stancode","text":"","code":"# make stan code stan_code <- coev_make_stancode(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny   )  # print Stan code cat(stan_code) #> // Generated with coevolve 0.0.0.9021 #> functions { #>   // Charles Driver's optimized way of solving for the asymptotic Q matrix #>   matrix ksolve (matrix A, matrix Q) { #>     int d = rows(A); #>     int d2 = (d * d - d) %/% 2; #>     matrix [d + d2, d + d2] O; #>     vector [d + d2] triQ; #>     matrix[d,d] AQ; #>     int z = 0;         // z is row of output #>     for (j in 1:d) {   // for column reference of solution vector #>       for (i in 1:j) { // and row reference... #>         if (j >= i) {  // if i and j denote a covariance parameter (from upper tri) #>           int y = 0;   // start new output row #>           z += 1;      // shift current output row down #>           for (ci in 1:d) {   // for columns and #>             for (ri in 1:d) { // rows of solution #>               if (ci >= ri) { // when in upper tri (inc diag) #>                 y += 1;       // move to next column of output #>                 if (i == j) { // if output row is for a diagonal element #>                   if (ri == i) O[z, y] = 2 * A[ri, ci]; #>                   if (ci == i) O[z, y] = 2 * A[ci, ri]; #>                 } #>                 if (i != j) { // if output row is not for a diagonal element #>                   //if column of output matches row of output, sum both A diags #>                   if (y == z) O[z, y] = A[ri, ri] + A[ci, ci]; #>                   if (y != z) { // otherwise... #>                     // if solution element we refer to is related to output row... #>                     if (ci == ri) { // if solution element is a variance #>                       // if variance of solution corresponds to row of our output #>                       if (ci == i) O[z, y] = A[j, ci]; #>                       // if variance of solution corresponds to col of our output #>                       if (ci == j) O[z, y] = A[i, ci]; #>                     } #>                     //if solution element is a related covariance #>                     if (ci != ri && (ri == i || ri == j || ci == i || ci == j )) { #>                       // for row 1,2 / 2,1 of output, if solution row ri 1 (match) #>                       // and column ci 3, we need A[2,3] #>                       if (ri == i) O[z, y] = A[j, ci]; #>                       if (ri == j) O[z, y] = A[i, ci]; #>                       if (ci == i) O[z, y] = A[j, ri]; #>                       if (ci == j) O[z, y] = A[i, ri]; #>                     } #>                   } #>                 } #>                 if (is_nan(O[z, y])) O[z, y] = 0; #>               } #>             } #>           } #>         } #>       } #>     } #>     z = 0; // get upper tri of Q #>     for (j in 1:d) { #>       for (i in 1:j) { #>         z += 1; #>         triQ[z] = Q[i, j]; #>       } #>     } #>     triQ = -O \\ triQ; // get upper tri of asymQ #>     z = 0; // put upper tri of asymQ into matrix #>     for (j in 1:d) { #>       for (i in 1:j) { #>         z += 1; #>         AQ[i, j] = triQ[z]; #>         if (i != j) AQ[j, i] = triQ[z]; #>       } #>     } #>     return AQ; #>   } #>    #>   // return number of matches of y in vector x #>   int num_matches(vector x, real y) { #>     int n = 0; #>     for (i in 1:rows(x)) #>       if (x[i] == y) #>         n += 1; #>     return n; #>   } #>    #>   // return indices in vector x where x == y #>   array[] int which_equal(vector x, real y) { #>     array [num_matches(x, y)] int match_positions; #>     int pos = 1; #>     for (i in 1:rows(x)) { #>       if (x[i] == y) { #>         match_positions[pos] = i; #>         pos += 1; #>       } #>     } #>     return match_positions; #>   } #> } #> data{ #>   int<lower=1> N_tips; // number of tips #>   int<lower=1> N_tree; // number of trees #>   int<lower=1> N_obs; // number of observations #>   int<lower=2> J; // number of response traits #>   int<lower=1> N_seg; // total number of segments in the trees #>   array[N_tree, N_seg] int<lower=1> node_seq; // index of tree nodes #>   array[N_tree, N_seg] int<lower=0> parent; // index of the parent node of each descendent #>   array[N_tree, N_seg] real ts; // time since parent #>   array[N_tree, N_seg] int<lower=0,upper=1> tip; // indicator of whether a given segment ends in a tip #>   array[J,J] int<lower=0,upper=1> effects_mat; // which effects should be estimated? #>   int<lower=2> num_effects; // number of effects being estimated #>   matrix[N_obs,J] y; // observed data #>   matrix[N_obs,J] miss; // are data points missing? #>   array[N_obs] int<lower=1> tip_id; // index between 1 and N_tips that gives the group id #>   int<lower=0,upper=1> prior_only; // should the likelihood be ignored? #> } #> transformed data{ #>   vector[to_int(N_obs - sum(col(miss, 1)))] obs1; // observed data for variable 1 #>   vector[to_int(N_obs - sum(col(miss, 2)))] obs2; // observed data for variable 2 #>   obs1 = col(y, 1)[which_equal(col(miss, 1), 0)]; #>   obs2 = col(y, 2)[which_equal(col(miss, 2), 0)]; #> } #> parameters{ #>   vector<upper=0>[J] A_diag; // autoregressive terms of A #>   vector[num_effects - J] A_offdiag; // cross-lagged terms of A #>   cholesky_factor_corr[J] L_R; // lower-tri choleksy decomp corr mat, used to construct Q mat #>   vector<lower=0>[J] Q_sigma; // std deviation parameters of the Q mat #>   vector[J] b; // SDE intercepts #>   array[N_tree] vector[J] eta_anc; // ancestral states #>   array[N_tree, N_seg - 1] vector[J] z_drift; // stochastic drift, unscaled and uncorrelated #>   array[N_tree] matrix[N_tips, J] terminal_drift; // drift for the tips #>   ordered[3] c1; // cut points for variable 1 #>   ordered[3] c2; // cut points for variable 2 #> } #> transformed parameters{ #>   array[N_tree, N_seg] vector[J] eta; #>   matrix[J,J] A = diag_matrix(A_diag); // selection matrix #>   matrix[J,J] Q = diag_matrix(Q_sigma) * (L_R * L_R') * diag_matrix(Q_sigma); // drift matrix #>   matrix[J,J] Q_inf; // asymptotic covariance matrix #>   array[N_tree, N_seg] matrix[J,J] VCV_tips; // variance-covariance matrix for drift at the tips #>   array[N_tree,N_tips] vector[J] tdrift; // terminal drift #>   // fill off diagonal of A matrix #>   { #>     int ticker = 1; #>     for (i in 1:J) { #>       for (j in 1:J) { #>         if (i != j) { #>           if (effects_mat[i,j] == 1) { #>             A[i,j] = A_offdiag[ticker]; #>             ticker += 1; #>           } else if (effects_mat[i,j] == 0) { #>             A[i,j] = 0; #>           } #>         } #>       } #>     } #>   } #>   // calculate asymptotic covariance #>   Q_inf = ksolve(A, Q); #>   // loop over phylogenetic trees #>   for (t in 1:N_tree) { #>     // setting ancestral states and placeholders #>     eta[t, node_seq[t, 1]] = eta_anc[t]; #>     VCV_tips[t, node_seq[t, 1]] = diag_matrix(rep_vector(-99, J)); #>     for (i in 2:N_seg) { #>       matrix[J,J] A_delta; // amount of deterministic change (selection) #>       matrix[J,J] VCV; // variance-covariance matrix of stochastic change (drift) #>       vector[J] drift_seg; // accumulated drift over the segment #>       A_delta = matrix_exp(A * ts[t, i]); #>       VCV = Q_inf - quad_form_sym(Q_inf, A_delta'); #>       drift_seg = cholesky_decompose(VCV) * z_drift[t, i-1]; #>       // if not a tip, add the drift parameter #>       if (tip[t, i] == 0) { #>         eta[t, node_seq[t, i]] = to_vector( #>           A_delta * eta[t, parent[t, i]] + ((A \\ add_diag(A_delta, -1)) * b) + drift_seg #>         ); #>         VCV_tips[t, node_seq[t, i]] = diag_matrix(rep_vector(-99, J)); #>       } #>       // if is a tip, omit, we'll deal with it in the model block; #>       else { #>         eta[t, node_seq[t, i]] = to_vector( #>           A_delta * eta[t, parent[t, i]] + ((A \\ add_diag(A_delta, -1)) * b) #>         ); #>         VCV_tips[t, node_seq[t, i]] = VCV; #>       } #>     } #>     for (i in 1:N_tips) { #>       tdrift[t,i] = cholesky_decompose(VCV_tips[t,i]) * to_vector(terminal_drift[t][i,]); #>     } #>   } #> } #> model{ #>   b ~ std_normal(); #>   for (t in 1:N_tree) { #>     eta_anc[t] ~ std_normal(); #>     for (i in 1:(N_seg - 1)) z_drift[t, i] ~ std_normal(); #>     to_vector(terminal_drift[t]) ~ std_normal(); #>   } #>   A_offdiag ~ std_normal(); #>   A_diag ~ std_normal(); #>   L_R ~ lkj_corr_cholesky(4); #>   Q_sigma ~ std_normal(); #>   c1 ~ normal(0, 2); #>   c2 ~ normal(0, 2); #>   if (!prior_only) { #>     for (i in 1:N_obs) { #>       vector[N_tree] lp = rep_vector(0.0, N_tree); #>       for (t in 1:N_tree) { #>         if (miss[i,1] == 0) lp[t] += ordered_logistic_lpmf(to_int(y[i,1]) | eta[t,tip_id[i]][1] + tdrift[t,tip_id[i]][1], c1); #>         if (miss[i,2] == 0) lp[t] += ordered_logistic_lpmf(to_int(y[i,2]) | eta[t,tip_id[i]][2] + tdrift[t,tip_id[i]][2], c2); #>       } #>       target += log_sum_exp(lp); #>     } #>   } #> } #> generated quantities{ #>   array[N_tree,N_obs,J] real yrep; // predictive checks #>   matrix[J,J] cor_R; // correlated drift #>   cor_R = multiply_lower_tri_self_transpose(L_R); #>   { #>     array[N_tree,N_tips] vector[J] terminal_drift_rep; #>     for (i in 1:N_tips) { #>       for (t in 1:N_tree) { #>         for (j in 1:J) terminal_drift_rep[t,i][j] = normal_rng(0, 1); #>         terminal_drift_rep[t,i] = cholesky_decompose(VCV_tips[t, i]) * terminal_drift_rep[t,i]; #>       } #>     } #>     for (i in 1:N_obs) { #>       for (t in 1:N_tree) { #>         yrep[t,i,1] = ordered_logistic_rng(eta[t,tip_id[i]][1] + terminal_drift_rep[t,tip_id[i]][1], c1); #>         yrep[t,i,2] = ordered_logistic_rng(eta[t,tip_id[i]][2] + terminal_drift_rep[t,tip_id[i]][2], c2); #>       } #>     } #>   } #> }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Stan data for dynamic coevolutionary model — coev_make_standata","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"Make data list Stan model. function takes dataset, phylogeny, set variables performs necessary computations (e.g., cutting tree segments, computing branch lengths, determining parent child nodes) Stan model.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"","code":"coev_make_standata(   data,   variables,   id,   tree,   effects_mat = NULL,   complete_cases = FALSE,   dist_mat = NULL,   dist_cov = \"exp_quad\",   measurement_error = NULL,   prior = NULL,   scale = TRUE,   estimate_Q_offdiag = TRUE,   estimate_residual = TRUE,   log_lik = FALSE,   prior_only = FALSE )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"data object class data.frame (one can coerced class) containing data variables used model. variables named list identifying variables coevolve model associated response distributions character strings (e.g. list(var1 = \"bernoulli_logit\", var2 = \"ordered_logistic\")). Must identify least two variables. Variable names must refer valid column names data. Currently, supported response distributions bernoulli_logit, ordered_logistic, poisson_softplus, negative_binomial_softplus, normal, gamma_log. id character length one identifying variable data links rows tips phylogeny. Must refer valid column name data. id column must exactly match tip labels phylogeny. tree phylogenetic tree object class phylo multiPhylo. tree(s) must rooted must include positive non-zero branch lengths. trees multiPhylo objects must number internal nodes branches. effects_mat (optional) boolean matrix row column names exactly matching variables declared model. specified, cross-lagged effects estimated model. specified, model estimate cross-lagged effects cells matrix TRUE ignore cross-lagged effects cells matrix FALSE. matrix, columns represent predictor variables rows represent outcome variables. autoregressive effects (e.g., X -> X) must TRUE matrix. complete_cases (optional) Logical. FALSE (default), missing values imputed model. TRUE, taxa missing data excluded. dist_mat (optional) distance matrix row column names exactly matching tip labels phylogeny. specified, model additionally control spatial location including separate Gaussian Process locations every coevolving variable model. dist_cov string specifying covariance kernel used Gaussian Processes locations. Currently supported \"exp_quad\" (exponentiated-quadratic kernel; default), \"exponential\" (exponential kernel), \"matern32\" (Matern 3/2 kernel). measurement_error (optional) named list coevolving variables associated columns dataset containing standard errors. valid normally-distributed variables. example, declare variables = list(x = \"normal\", y = \"normal\"), set measurement_error = list(x = \"x_std_err\") tell function include measurement error x using standard errors x_std_err column dataset. prior (optional) named list priors model. specified, model uses default priors (see help(coev_fit)). Alternatively, user can specify named list priors. list must contain non-duplicated entries following parameters: autoregressive effects (A_diag), cross effects (A_offdiag), Cholesky factor drift matrix (L_R), drift std. dev. parameters (Q_sigma), continuous time intercepts (b), ancestral states traits (eta_anc), cutpoints ordinal variables (c), overdispersion parameters negative binomial variables (phi), shape parameters gamma variables (shape), sigma parameters Gaussian Processes locations (sigma_dist), rho parameters Gaussian Processes locations (rho_dist), residual standard deviations repeated observations (sigma_residual), Cholesky factor residual correlations repeated observations (L_residual). must entered valid prior strings, e.g. list(A_offdiag = \"normal(0, 2)\"). scale Logical. TRUE (default), variables following normal gamma_log response distributions scaled fitting model. Continuous variables following normal distribution standardised (e.g., mean centered divided standard deviation) positive real variables following gamma_log distribution divided mean value without centering. approach recommended using default priors improve efficiency ensure accurate inferences. FALSE, variables left unscaled model fitting. case, users take care set sensible priors variables. estimate_Q_offdiag Logical. TRUE (default), model estimates -diagonals $$Q$$ drift matrix (.e., correlated drift). FALSE, -diagonals $$Q$$ drift matrix set zero. estimate_residual Logical. TRUE (default), model estimates residual standard deviations residual correlations repeated observations taxa. FALSE, residual standard deviations residual correlations estimated. latter may preferable cases repeated observations sparse (e.g., taxa repeated observations). argument applies repeated observations present data. log_lik Logical. Set FALSE default. TRUE, model returns pointwise log likelihood, can used calculate WAIC LOO. prior_only Logical. FALSE (default), model fitted data returns posterior distribution. TRUE, model samples prior , ignoring likelihood.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"list containing data fitting dynamic coevolutionary model Stan.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"details, see help(coev_fit)","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_make_standata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Stan data for dynamic coevolutionary model — coev_make_standata","text":"","code":"# make stan data coev_make_standata(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny   ) #> $N_tips #> [1] 97 #>  #> $N_tree #> [1] 1 #>  #> $N_obs #> [1] 97 #>  #> $J #> [1] 2 #>  #> $N_seg #> [1] 193 #>  #> $node_seq #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]   98   99  101  192  193  102  111  114  115   116   117   118   100   188 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]   119   120   125   126   127   128   156   121   157   178   171   158 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]   122   129   164   165   185   179   172   166   170   180   112   167 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]   174   130   123   103   182   181   124   113   105   159   106   176 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]   131   104   189   151   177   173   184   190   168   183   107   152 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]   160   175   132   133   153   155   134   108   135   139   149   109 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]   186   169   161   146   191   140   162   141   110   136   150   142 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]   187   143   147   144   145   163   148   137     4    95    96   138 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]    17     70     62     92     53     65     61     44     93     14 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]     29     66     43     45     42     58     94     40     75     60 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]     48     88     52      8    154     63     64     79     77     31 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]     51     28     91     82     74     36     47     83     55     69 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]     46     76      5     23     54     32     20     90     25      1 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]      3     50      2     30     15     97     68     38     16     41 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]     22     34     33     59     26     73      7      6     80     37 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]     86     18     81     10     21     35     27     71     84     85 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]     39      9     24     67     49     11     57     56     72     78 #>      [,189] [,190] [,191] [,192] [,193] #> [1,]     12     13     87     89     19 #>  #> $parent #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    0   98   99   98  192  101  102  111  114   115   116   117    99   118 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]   118   119   120   125   126   127   128   120   156   126   156   157 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]   121   128   158   164   119   178   171   165   157   179   111   166 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]   171   129   122   102   180   180   121   112   103   158   105   174 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]   130   103   114   129   176   172   179   189   167   182   106   151 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]   159   174   131   132   152   153   133   107   134   135   132   108 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]   185   168   160   134   190   139   161   140   108   135   149   141 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]   186   142   146   143   140   162   133   136   104   193   192   137 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]   116    163    155    191    143    155    151    150    190    113 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]    170    152    150    149    148    146    189    147    167    130 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]    145    187    144    109    153    154    154    164    169    175 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]    144    184    191    123    166    173    145    123    138    163 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]    139    168    104    183    138    175    125    117    181    193 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]    101    142    100    170    112    100    161    172    115    148 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]    183    177    177    147    181    165    109    107    127    173 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]    185    188    122    110    178    176    184    162    124    124 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]    131    110    182    160    141    105    136    137    159    169 #>      [,189] [,190] [,191] [,192] [,193] #> [1,]    106    113    187    186    188 #>  #> $ts #>      [,1]       [,2]       [,3]       [,4]        [,5]      [,6]       [,7] #> [1,]  -99 0.02400105 0.06746978 0.09290211 0.007513379 0.1544719 0.01876492 #>             [,8]        [,9]       [,10]       [,11]       [,12]     [,13] #> [1,] 0.007647891 0.005921474 0.004474085 0.003112665 0.004550234 0.2668098 #>            [,14]       [,15]      [,16]      [,17]      [,18]       [,19] #> [1,] 0.007280485 0.008624489 0.01203026 0.01179292 0.01328848 0.001003278 #>            [,20]        [,21]    [,22]       [,23]      [,24]      [,25] #> [1,] 0.004111867 0.0007227681 0.032275 0.002663366 0.01251495 0.01140792 #>            [,26]      [,27]      [,28]      [,29]       [,30]      [,31] #> [1,] 0.009187734 0.02877621 0.03426191 0.02296127 0.001496488 0.08805246 #>           [,32]      [,33]      [,34]     [,35]      [,36]     [,37]      [,38] #> [1,] 0.03865207 0.04334719 0.04463487 0.1026653 0.06633366 0.1961358 0.06357062 #>          [,39]     [,40]     [,41]     [,42]      [,43]      [,44]     [,45] #> [1,] 0.1499919 0.1304844 0.1446565 0.2737961 0.07381795 0.08128446 0.2085895 #>           [,46]     [,47]     [,48]      [,49]      [,50]      [,51]      [,52] #> [1,] 0.09694968 0.0381307 0.2084207 0.01451076 0.07404825 0.07257567 0.06386799 #>          [,53]     [,54]      [,55]     [,56]     [,57]      [,58]     [,59] #> [1,] 0.3184708 0.2200117 0.03150443 0.2128979 0.2268019 0.04408181 0.1672533 #>          [,60]     [,61]      [,62]    [,63]    [,64]     [,65]      [,66] #> [1,] 0.1365735 0.0954154 0.09996007 0.147063 0.207362 0.1689723 0.01295665 #>           [,67]       [,68]       [,69]    [,70]       [,71]       [,72] #> [1,] 0.06611392 0.002242045 0.003349449 0.101018 0.005471434 0.003639409 #>           [,73]      [,74]     [,75]     [,76]    [,77]      [,78]    [,79] #> [1,] 0.03901317 0.02251309 0.4078498 0.1435542 0.104351 0.04982802 0.179864 #>           [,80]      [,81]      [,82]      [,83]      [,84]    [,85]      [,86] #> [1,] 0.04353043 0.01408332 0.02992327 0.07832502 0.07885602 0.068061 0.01080743 #>           [,87]    [,88]      [,89]       [,90]      [,91]      [,92]     [,93] #> [1,] 0.06708163 0.012016 0.05588993 0.008448661 0.06148921 0.05073236 0.1211957 #>           [,94]     [,95]    [,96]     [,97]      [,98]     [,99]     [,100] #> [1,] 0.05780218 0.3307949 0.819174 0.8411389 0.03531966 0.6605537 0.08130539 #>         [,101]   [,102]     [,103]    [,104]    [,105]    [,106]   [,107] #> [1,] 0.1963106 0.145949 0.09202333 0.1979781 0.3699995 0.1133132 0.334521 #>         [,108]    [,109]    [,110]    [,111]    [,112]     [,113]    [,114] #> [1,] 0.4120067 0.5232241 0.2750419 0.1170188 0.1852651 0.09123757 0.1596263 #>         [,115]    [,116]    [,117]   [,118]     [,119]    [,120]     [,121] #> [1,] 0.3824937 0.1039215 0.4870029 0.467679 0.09569461 0.1120389 0.09728522 #>         [,122]    [,123]       [,124]       [,125]    [,126]  [,127]    [,128] #> [1,] 0.1842164 0.2140188 1.852777e-06 0.0002823631 0.5991136 0.17916 0.2670168 #>         [,129]    [,130]    [,131]    [,132]    [,133]   [,134]    [,135] #> [1,] 0.1000644 0.3638327 0.1631798 0.4613608 0.5553909 0.369052 0.1010677 #>         [,136]     [,137]    [,138]    [,139]    [,140]    [,141]    [,142] #> [1,] 0.4624725 0.03811939 0.1011301 0.2070137 0.3271607 0.3973098 0.3172446 #>          [,143]    [,144]    [,145]    [,146]    [,147]    [,148]    [,149] #> [1,] 0.04126911 0.2720193 0.6599075 0.6972758 0.4483897 0.8830948 0.8922247 #>         [,150]  [,151]    [,152]    [,153]    [,154]   [,155]    [,156] #> [1,] 0.1264579 0.69307 0.5365641 0.5235932 0.6936258 0.170763 0.5878788 #>         [,157]    [,158]    [,159]    [,160]    [,161]    [,162]    [,163] #> [1,] 0.7063449 0.1029101 0.3205798 0.3756816 0.3756818 0.1154087 0.4500572 #>         [,164]    [,165]    [,166]    [,167]   [,168]    [,169]    [,170] #> [1,] 0.6066956 0.1938508 0.3173821 0.6482094 0.375722 0.5982723 0.6878538 #>         [,171]  [,172]    [,173]   [,174]    [,175]    [,176]    [,177] #> [1,] 0.6134284 0.13878 0.6374391 0.408668 0.3721702 0.1587177 0.4347266 #>         [,178]   [,179]    [,180]    [,181]    [,182]    [,183]    [,184] #> [1,] 0.4347266 0.408814 0.1404475 0.4603031 0.2793754 0.1426384 0.4313842 #>         [,185]     [,186]    [,187]    [,188]    [,189]    [,190]    [,191] #> [1,] 0.1425432 0.08492627 0.4292177 0.1960201 0.4215052 0.4360928 0.1368661 #>         [,192]    [,193] #> [1,] 0.2043183 0.7023055 #>  #> $tip #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0     0 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]     0     0     0     0     0     0     0     0     0     0     0     0 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]     0     0     0     0     0     0     0     0     1     1     1     0 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]     1      1      1      1      1      1      1      1      1      1 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]      1      1      1      1      0      1      1      1      1      1 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]      1      1      1      1      1      1      1      1      1      1 #>      [,189] [,190] [,191] [,192] [,193] #> [1,]      1      1      1      1      1 #>  #> $effects_mat #>                     political_authority religious_authority #> political_authority                   1                   1 #> religious_authority                   1                   1 #>  #> $num_effects #> [1] 4 #>  #> $y #>       political_authority religious_authority #>  [1,]                   4                   4 #>  [2,]                   3                   3 #>  [3,]                   3                   3 #>  [4,]                   3                   3 #>  [5,]                   4                   3 #>  [6,]                   1                   1 #>  [7,]                   2                   3 #>  [8,]                   1                   4 #>  [9,]                   4                   3 #> [10,]                   3                   3 #> [11,]                   4                   1 #> [12,]                   2                   3 #> [13,]                   3                   3 #> [14,]                   1                   1 #> [15,]                   4                   4 #> [16,]                   4                   4 #> [17,]                   4                   4 #> [18,]                   4                   4 #> [19,]                   4                   4 #> [20,]                   2                   1 #> [21,]                   3                   3 #> [22,]                   1                   1 #> [23,]                   1                   1 #> [24,]                   3                   3 #> [25,]                   3                   3 #> [26,]                   2                   2 #> [27,]                   3                   3 #> [28,]                   3                   3 #> [29,]                   2                   1 #> [30,]                   2                   2 #> [31,]                   4                   4 #> [32,]                   4                   4 #> [33,]                   3                   1 #> [34,]                   1                   4 #> [35,]                   4                   4 #> [36,]                   4                   4 #> [37,]                   4                   4 #> [38,]                   4                   4 #> [39,]                   4                   4 #> [40,]                   1                   1 #> [41,]                   4                   4 #> [42,]                   4                   4 #> [43,]                   4                   4 #> [44,]                   4                   4 #> [45,]                   3                   3 #> [46,]                   4                   4 #> [47,]                   3                   4 #> [48,]                   4                   4 #> [49,]                   4                   4 #> [50,]                   4                   3 #> [51,]                   4                   4 #> [52,]                   4                   4 #> [53,]                   4                   4 #> [54,]                   3                   3 #> [55,]                   3                   3 #> [56,]                   4                   4 #> [57,]                   4                   4 #> [58,]                   1                   3 #> [59,]                   4                   4 #> [60,]                   4                   4 #> [61,]                   3                   3 #> [62,]                   4                   1 #> [63,]                   4                   4 #> [64,]                   4                   4 #> [65,]                   4                   4 #> [66,]                   4                   4 #> [67,]                   3                   3 #> [68,]                   3                   4 #> [69,]                   1                   2 #> [70,]                   1                   4 #> [71,]                   1                   4 #> [72,]                   3                   3 #> [73,]                   3                   1 #> [74,]                   2                   2 #> [75,]                   1                   3 #> [76,]                   4                   4 #> [77,]                   4                   4 #> [78,]                   3                   3 #> [79,]                   1                   2 #> [80,]                   3                   3 #> [81,]                   4                   4 #> [82,]                   3                   3 #> [83,]                   4                   3 #> [84,]                   4                   4 #> [85,]                   4                   4 #> [86,]                   3                   4 #> [87,]                   1                   4 #> [88,]                   1                   4 #> [89,]                   4                   4 #> [90,]                   3                   3 #> [91,]                   3                   3 #> [92,]                   4                   4 #> [93,]                   4                   4 #> [94,]                   4                   4 #> [95,]                   3                   3 #> [96,]                   4                   4 #> [97,]                   3                   3 #>  #> $miss #>       political_authority religious_authority #>  [1,]                   0                   0 #>  [2,]                   0                   0 #>  [3,]                   0                   0 #>  [4,]                   0                   0 #>  [5,]                   0                   0 #>  [6,]                   0                   0 #>  [7,]                   0                   0 #>  [8,]                   0                   0 #>  [9,]                   0                   0 #> [10,]                   0                   0 #> [11,]                   0                   0 #> [12,]                   0                   0 #> [13,]                   0                   0 #> [14,]                   0                   0 #> [15,]                   0                   0 #> [16,]                   0                   0 #> [17,]                   0                   0 #> [18,]                   0                   0 #> [19,]                   0                   0 #> [20,]                   0                   0 #> [21,]                   0                   0 #> [22,]                   0                   0 #> [23,]                   0                   0 #> [24,]                   0                   0 #> [25,]                   0                   0 #> [26,]                   0                   0 #> [27,]                   0                   0 #> [28,]                   0                   0 #> [29,]                   0                   0 #> [30,]                   0                   0 #> [31,]                   0                   0 #> [32,]                   0                   0 #> [33,]                   0                   0 #> [34,]                   0                   0 #> [35,]                   0                   0 #> [36,]                   0                   0 #> [37,]                   0                   0 #> [38,]                   0                   0 #> [39,]                   0                   0 #> [40,]                   0                   0 #> [41,]                   0                   0 #> [42,]                   0                   0 #> [43,]                   0                   0 #> [44,]                   0                   0 #> [45,]                   0                   0 #> [46,]                   0                   0 #> [47,]                   0                   0 #> [48,]                   0                   0 #> [49,]                   0                   0 #> [50,]                   0                   0 #> [51,]                   0                   0 #> [52,]                   0                   0 #> [53,]                   0                   0 #> [54,]                   0                   0 #> [55,]                   0                   0 #> [56,]                   0                   0 #> [57,]                   0                   0 #> [58,]                   0                   0 #> [59,]                   0                   0 #> [60,]                   0                   0 #> [61,]                   0                   0 #> [62,]                   0                   0 #> [63,]                   0                   0 #> [64,]                   0                   0 #> [65,]                   0                   0 #> [66,]                   0                   0 #> [67,]                   0                   0 #> [68,]                   0                   0 #> [69,]                   0                   0 #> [70,]                   0                   0 #> [71,]                   0                   0 #> [72,]                   0                   0 #> [73,]                   0                   0 #> [74,]                   0                   0 #> [75,]                   0                   0 #> [76,]                   0                   0 #> [77,]                   0                   0 #> [78,]                   0                   0 #> [79,]                   0                   0 #> [80,]                   0                   0 #> [81,]                   0                   0 #> [82,]                   0                   0 #> [83,]                   0                   0 #> [84,]                   0                   0 #> [85,]                   0                   0 #> [86,]                   0                   0 #> [87,]                   0                   0 #> [88,]                   0                   0 #> [89,]                   0                   0 #> [90,]                   0                   0 #> [91,]                   0                   0 #> [92,]                   0                   0 #> [93,]                   0                   0 #> [94,]                   0                   0 #> [95,]                   0                   0 #> [96,]                   0                   0 #> [97,]                   0                   0 #>  #> $tip_id #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #> [51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 #> [76] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 #>  #> $prior_only #> [1] 0 #>"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"Plot delta theta values trait pairs fitted coevfit object. plot can used visually assess contingencies directionality different variables coevolutionary process.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"","code":"coev_plot_delta_theta(   object,   variables = NULL,   prob = 0.66,   prob_outer = 0.95,   limits = NULL )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"object object class coevfit variables NULL (default), plot includes coevolving variables model. Otherwise, character vector length >= 2 declaring variables included plot. prob Probability mass include inner interval. Default 0.66 (66% interval). prob_outer Probability mass include outer interval. Default 0.95 (95% interval). limits NULL (default), limits scaled automatically include posterior samples. Otherwise, numeric vector length 2 specifying lower upper limits x-axis.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"ggplot object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"function repeatedly uses coev_calculate_delta_theta function hood generate pairs plot \\(\\Delta\\theta\\) variables model. details definition calculation \\(\\Delta\\theta\\), see help(coev_calculate_delta_theta). Note often posterior distribution \\(\\Delta\\theta\\) long tails, meaning distribution different traits can difficult visualise single pairs plot. plot produce satisfactory visualisations, user either specify narrower limits x-axis use coev_calculate_delta_theta function create plots manually.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_delta_theta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot delta theta values from a fitted coevfit object — coev_plot_delta_theta","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # plot delta theta values for all effects coev_plot_delta_theta(fit) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"Plot flowfield expected evolutionary dynamics fitted coevfit object, help phaseR package.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"","code":"coev_plot_flowfield(   object,   var1,   var2,   nullclines = FALSE,   limits = c(-2.5, 2.5) )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"object object class coevfit var1 character string equal one coevolving variables model var2 character string equal one coevolving variables model nullclines Logical (defaults FALSE); whether show coloured nullclines indicate variable equilibrium, depending state limits numeric vector length 2 (defaults c(-2.5, 2.5)); specifying lower limit upper limit x y axes.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"flowfield plot drawn directly device","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"flowfield visualises change two coevolving traits depending current states, direction strength change depicting direction size arrows. nullclines included, represent parameter combinations trait equilibrium, depending state trait. three traits included model, traits held median values computations. Note flowfield plots can potentially produce misleading pictures coevolutionary dynamics traits held constant models three traits. plot look right, user might try zooming default parameter space setting wider limits. variables (e.g., continuous count variables), default limits may suitable.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_flowfield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot flowfield of expected evolutionary change from a fitted coevfit object — coev_plot_flowfield","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # plot flow field coev_plot_flowfield(   object = fit,   var1 = \"political_authority\",   var2 = \"religious_authority\"   ) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_pred_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","title":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","text":"function plots predicted coevolutionary time series using estimated parameters fitted coevfit model. default, plot uses posterior ancestral states estimated model starting values, users can also set starting values traits. Plots can generated without stochastic drift. details underlying predictive function, see help(coev_pred_series).","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_pred_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","text":"","code":"coev_plot_pred_series(object, prob = 0.95, ...)"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_pred_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","text":"object object class coevfit prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. ... Additional arguments passed coev_pred_series","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_pred_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","text":"ggplot object.","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_pred_series.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_pred_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a predicted coevolutionary time series from a fitted coevfit object — coev_plot_pred_series","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # simulated trait co-evolution coev_plot_pred_series(   object = fit,   stochastic = TRUE   )  # expected trait co-evolution, no drift coev_plot_pred_series(   object = fit,   stochastic = FALSE,   eta_anc = list(political_authority = -2, religious_authority = 1.5)   ) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_predictive_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","title":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","text":"Plot posterior (prior) predictive checks variables fitted coevfit object, help bayesplot package.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_predictive_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","text":"","code":"coev_plot_predictive_check(   object,   variables = NULL,   ndraws = NULL,   tree_id = NULL )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_predictive_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","text":"object object class coevfit variables NULL (default), function returns list plots coevolving variables model. Otherwise, character vector declaring variables included list plots. ndraws integer indicating number draws return. default maximum number draws size posterior sample. tree_id integer indicating tree ID use making posterior predictions. Set NULL default, use draws every tree, integrating phylogenetic uncertainty.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_predictive_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","text":"list ggplot objects","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_predictive_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_predictive_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot predictive check from a fitted coevfit object — coev_plot_predictive_check","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # plot predictive checks for all variables coev_plot_predictive_check(fit) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"Plot heatmap selection gradient two variables fitted coevfit object.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"","code":"coev_plot_selection_gradient(   object,   var1,   var2,   contour = FALSE,   limits = c(-2.5, 2.5) )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"object object class coevfit var1 character string equal one coevolving variables model var2 character string equal one coevolving variables model contour Logical (defaults FALSE); whether show white contour lines indicate selection stronger drift limits numeric vector length 2 (defaults c(-2.5, 2.5)); specifying lower limit upper limit x y axes.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"ggplot object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"selection gradient operationalised ratio change trait due deterministic selection \\(\\Delta\\alpha\\) change trait due stochastic drift \\(\\sigma\\). Values -1 1 indicate parameter space change due drift greater change due selection trait. Conversely, values greater 1 (less -1) indicate parameter space positive (negative) selection stronger drift. three traits included model, traits held median values computations. Note selection gradient plots can potentially produce misleading pictures coevolutionary dynamics traits held constant models three traits. plot look right, user might try zooming default parameter space setting wider limits. variables (e.g., continuous count variables), default limits may suitable.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_selection_gradient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot selection gradient heatmap from a fitted coevfit object — coev_plot_selection_gradient","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # plot selection gradient coev_plot_selection_gradient(   object = fit,   var1 = \"political_authority\",   var2 = \"religious_authority\"   ) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"Produce pairs plot estimated trait values taxa fitted coevfit object. plot includes scatterplot(s) median estimated trait values, heatmap(s) median estimated trait values, density plots marginal distributions variable associated posterior uncertainty.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"","code":"coev_plot_trait_values(   object,   variables = NULL,   ndraws = 50,   tree_id = NULL,   xlim = NULL,   ylim = NULL )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"object object class coevfit variables NULL (default), function returns pairs plot including coevolving variables model. Otherwise, character vector declaring variables included. ndraws integer indicating number draws return density plots diagonal. default maximum number draws size posterior sample. tree_id integer indicating tree ID use making posterior predictions. Set NULL default, use draws every tree, integrating phylogenetic uncertainty. xlim Limits x-axis. NULL (default), limits set minimum maximum estimated trait values. ylim Limits y-axis. NULL (default), limits set minimum maximum estimated trait values.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"patchwork ggplot objects","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"Ringen, E., Martin, J. S., & Jaeggi, . (2021). Novel phylogenetic methods reveal resource-use intensification drives evolution \"complex\" societies. EcoEvoRXiv. doi:10.32942/osf.io/wfp95 Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J., & Atkinson, Q. D. (2023). Coevolution religious political authority Austronesian societies. Nature Human Behaviour, 7(1), 38-45. 10.1038/s41562-022-01471-y","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_plot_trait_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot estimated trait values from a fitted coevfit object — coev_plot_trait_values","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # pairs plot of trait values coev_plot_trait_values(fit) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_pred_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","title":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","text":"function produces predicted values traits time series, given estimated parameters coevfit model. function used hood plotting function coev_pred_series.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_pred_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","text":"","code":"coev_pred_series(   object,   eta_anc = NULL,   intervention_values = NULL,   tmax = 1,   ntimes = 30,   ndraws = NULL,   stochastic = FALSE )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_pred_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","text":"object object class coevfit eta_anc NULL (default), starting values latent states \\(\\eta\\) set estimated ancestral states root coevfit model. Otherwise, named list length equal number variables specifying initial \\(\\eta\\) values. variable names must included list. intervention_values Either NULL (default) named list variables associated intervention values. NULL, traits free vary. Otherwise, coevolving variables must declared separately named list without repetition. intervention value particular variable set NA, variable treated free variable. intervention value particular variable specified, variable held constant trait value calculation. least one variable must declared free variable least one variable must held constant (e.g., list(var1 = NA, var2 = 0)). tmax positive number indicating total duration time predict. Set 1 default, corresponding entire time depth original phylogenetic tree(s). ntimes positive integer indicating total number discrete time steps make predictions. step corresponds time difference dt = tmax/ntimes. Set 30 default. ndraws integer indicating number draws return. default maximum number draws size posterior sample. stochastic Logical (defaults FALSE); indicator whether predictions include expected co-evolutionary change due deterministic selection (FALSE) also stochastic drift (TRUE). Incompatible 'intervention_values' argument.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_pred_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","text":"[ndraw, ntimes, nvariables] array predicted \\(\\eta\\) values.","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_pred_series.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_pred_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict a co-evolutionary time series from a fitted coevfit object — coev_pred_series","text":"","code":"if (FALSE) { # \\dontrun{ # fit dynamic coevolutionary model fit <- coev_fit(   data = authority$data,   variables = list(     political_authority = \"ordered_logistic\",     religious_authority = \"ordered_logistic\"   ),   id = \"language\",   tree = authority$phylogeny,   # additional arguments for cmdstanr::sample()   chains = 4,   parallel_chains = 4,   seed = 1   )  # simulate trait co-evolution sims <- coev_pred_series(   object = fit,   stochastic = TRUE   )  # expected trait co-evolution, no drift epreds <- coev_pred_series(   object = fit,   stochastic = FALSE,   eta_anc = list(political_authority = -2, religious_authority = 1.5)   )  # expected trait co-evolution under intervention, no drift epreds_intervention <- coev_pred_series(   object = fit,   stochastic = FALSE,   intervention_values = list(political_authority = NA,                              religious_authority = 1.5)   ) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"function simulates coevolution multiple continuous variables discrete time steps following simple VAR(1) autoregressive model. Users set sample size, variable names, strength selection drift, probability speciation event given time step. function returns phylogeny, results simulation run, dataset contemporary trait values.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"","code":"coev_simulate_coevolution(   n,   variables,   selection_matrix,   drift,   prob_split,   intercepts = NULL,   ancestral_states = NULL )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"n Number data points resulting data frame. variables character vector variable names (e.g., c(\"x\",\"y\")) selection_matrix numeric matrix determining strength selection variables. matrix must number rows columns equal number variables row column names must contain specified variables. cell determines strength selection column variable row variable. example, cell \"x\" column \"x\" row indicates much previous values x influence future values x (autocorrelation). contrast, cell \"x\" column \"y\" row indicates much previous values x influence future values y (cross-lagged effect). drift named numeric vector specifying strength drift different variables. Names must include specified variables. prob_split numeric probability species split given timestep. intercepts Intercepts VAR(1) model. NULL (default), intercepts set zero variables. Otherwise, named numeric vector specifying intercepts different variables. Names must include specified variables. ancestral_states Ancestral states different variables. NULL (default), ancestral states set zero variables. Otherwise, named numeric vector specifying ancestral states different variables. Names must include specified variables.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"List dataset final timestep (data), full simulation log (simulation), pruned phylogenetic tree (tree).","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"model underlying simulation simple VAR(1) autoregressive model, values variables previous timestep predict values current timestep. case two variables, model follows: $$Y_t = \\alpha_{y}+\\beta_{y,y}Y_{t-1}+\\beta_{y,x}X_{t-1} +   \\mathcal{N}(0,\\epsilon_{y})$$ $$X_t = \\alpha_{x}+\\beta_{x,x}X_{t-1}+\\beta_{x,y}Y_{t-1} +   \\mathcal{N}(0,\\epsilon_{x})$$ \\(\\alpha\\) represents intercepts, \\(\\beta\\) represents selection matrix, \\(\\epsilon\\) represents vector drift parameters. probability \\(p\\), speciation event creates two independent evolutionary branches. simulation continues intended sample size species reached.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"Scott Claessens scott.claessens@gmail.com, Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/coev_simulate_coevolution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate the coevolution of multiple variables in discrete time steps — coev_simulate_coevolution","text":"","code":"# simulate coevolution of x and y n <- 100 variables <- c(\"x\",\"y\") # x -> y but not vice versa selection_matrix <- matrix(   c(     0.95, 0.00,     0.80, 0.95   ),   nrow = 2,   byrow = TRUE,   dimnames = list(variables, variables) ) drift <- c(\"x\" = 0.05, \"y\" = 0.05) prob_split <- 0.05 # run simulation sim <-   coev_simulate_coevolution(     n, variables, selection_matrix,     drift, prob_split   )"},{"path":"https://scottclaessens.github.io/coevolve/reference/coevolve-package.html","id":null,"dir":"Reference","previous_headings":"","what":"coevolve: Fit Bayesian Generalized Dynamic Phylogenetic Models using 'Stan' — coevolve-package","title":"coevolve: Fit Bayesian Generalized Dynamic Phylogenetic Models using 'Stan' — coevolve-package","text":"Fit Bayesian generalized dynamic phylogenetic models using 'Stan'. package allows abritrary number variables different response distributions coevolve phylogenetic tree via Ornstein-Uhlenbeck evolutionary process, allowing users assess directionality coevolving variables.","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/coevolve-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"coevolve: Fit Bayesian Generalized Dynamic Phylogenetic Models using 'Stan' — coevolve-package","text":"Maintainer: Scott Claessens scott.claessens@gmail.com (ORCID) Authors: Erik Ringen erikjacob.ringen@uzh.ch","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/extract_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract samples (draws) from a fitted coevfit object — extract_samples","title":"Extract samples (draws) from a fitted coevfit object — extract_samples","text":"Extract samples (draws) fitted coevfit object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/extract_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract samples (draws) from a fitted coevfit object — extract_samples","text":"","code":"extract_samples(object)"},{"path":"https://scottclaessens.github.io/coevolve/reference/extract_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract samples (draws) from a fitted coevfit object — extract_samples","text":"object object class coevfit","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/extract_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract samples (draws) from a fitted coevfit object — extract_samples","text":"Samples 'rethinking' style list format","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/primates.html","id":null,"dir":"Reference","previous_headings":"","what":"Brain weight, body weight, diet, and sociality in primates — primates","title":"Brain weight, body weight, diet, and sociality in primates — primates","text":"dataset associated phylogeny describes brain weights, body weights, dietary categories, social systems, mating systems, group sizes 143 primate species. data originally compiled DeCasien et al. (2017). phylogeny 50% majority rule consensus tree 10k Trees website.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/primates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brain weight, body weight, diet, and sociality in primates — primates","text":"","code":"primates"},{"path":"https://scottclaessens.github.io/coevolve/reference/primates.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Brain weight, body weight, diet, and sociality in primates — primates","text":"list containing dataset associated phylogeny. phylogeny pruned consensus tree 143 species primate (excluding humans). dataset data frame 143 observations 11 variables: species primate species clade clade primate species brain_weight Average brain weight, grams body_weight Average body weight, grams diet factor four levels indicating whether species' dietary category folivore, frugivore, frugivore/folivore, omnivore percent_fruit Percentage fruit diet social_system factor four levels indicating whether species' social system solitary, pair-living, harem polygyny, polygynandry mating_system factor five levels indicating whether species' mating system spatial polygyny, monogamy, polyandry, harem polygyny, polygynandry group_size Average group size","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/primates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Brain weight, body weight, diet, and sociality in primates — primates","text":"DeCasien, . R., Williams, S. ., & Higham, J. P. (2017). Primate brain size predicted diet sociality. Nature Ecology & Evolution, 1(5), 0112. Arnold, C., Matthews, L. J., & Nunn, C. L. (2010). 10kTrees website: new online resource primate phylogeny. Evolutionary Anthropology, 19(3), 114-118. https://10ktrees.nunn-lab.org/Primates/index.html","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/primates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brain weight, body weight, diet, and sociality in primates — primates","text":"","code":"if (FALSE) { # \\dontrun{ # fit model to primates data m <-   coev_fit(     data = primates$data,     variables = list(       brain_weight = \"lognormal\",       body_weight = \"lognormal\"     ),     id = \"species\",     tree = primates$phylogeny,     # arguments to cmdstanr::sample()     parallel_chains = 4,     seed = 1   ) # print model summary summary(m) # plot delta theta coev_plot_delta_theta(m) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/print.coevfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a summary of a fitted model represented by a coevfit object — print.coevfit","title":"Print a summary of a fitted model represented by a coevfit object — print.coevfit","text":"Print summary fitted model represented coevfit object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/print.coevfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a summary of a fitted model represented by a coevfit object — print.coevfit","text":"","code":"# S3 method for class 'coevfit' print(x, digits = 2, ...)"},{"path":"https://scottclaessens.github.io/coevolve/reference/print.coevfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a summary of a fitted model represented by a coevfit object — print.coevfit","text":"x object class coevfit digits number significant digits printing summary; defaults 2 ... Additional arguments passed method summary coevfit.","code":""},{"path":[]},{"path":"https://scottclaessens.github.io/coevolve/reference/repeated.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset with repeated observations — repeated","title":"Example dataset with repeated observations — repeated","text":"example dataset associated phylogeny used example repeated observations phylogenetic modelling. data adapted de Villemeruil & Nakagawa (2014) include first twenty species.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/repeated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset with repeated observations — repeated","text":"","code":"repeated"},{"path":"https://scottclaessens.github.io/coevolve/reference/repeated.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset with repeated observations — repeated","text":"list containing dataset associated phylogeny. dataset data frame 100 observations 3 variables: species name species x example continuous variable y example continuous variable","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/repeated.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example dataset with repeated observations — repeated","text":"de Villemeruil P. & Nakagawa, S. (2014). General quantitative genetic methods comparative biology. L. Garamszegi (Ed.), Modern phylogenetic comparative methods application evolutionary biology: concepts practice (pp. 287-303). Springer, New York.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/repeated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example dataset with repeated observations — repeated","text":"","code":"if (FALSE) { # \\dontrun{ # fit model to repeated data m <-   coev_fit(     data = repeated$data,     variables = list(       x = \"normal\",       y = \"normal\"     ),     id = \"species\",     tree = repeated$phylogeny,     # arguments to cmdstanr::sample()     parallel_chains = 4,     seed = 1   ) # print model summary summary(m) # plot delta theta coev_plot_delta_theta(m) } # }"},{"path":"https://scottclaessens.github.io/coevolve/reference/save_coevfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a fitted coevfit object to a file — save_coevfit","title":"Save a fitted coevfit object to a file — save_coevfit","text":"wrapper around saveRDS saves fitted coevfit model object ensuring posterior draws diagnostics correctly saved cmdstanr.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/save_coevfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a fitted coevfit object to a file — save_coevfit","text":"","code":"save_coevfit(object, file, ...)"},{"path":"https://scottclaessens.github.io/coevolve/reference/save_coevfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a fitted coevfit object to a file — save_coevfit","text":"object object class coevfit file string declaring path file saved ... arguments pass saveRDS besides object file","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/stancode.html","id":null,"dir":"Reference","previous_headings":"","what":"Expose the Stan code of a fitted model represented by a coevfit object — stancode","title":"Expose the Stan code of a fitted model represented by a coevfit object — stancode","text":"Expose Stan code fitted model represented coevfit object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/stancode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expose the Stan code of a fitted model represented by a coevfit object — stancode","text":"","code":"stancode(object)"},{"path":"https://scottclaessens.github.io/coevolve/reference/stancode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expose the Stan code of a fitted model represented by a coevfit object — stancode","text":"object object class coevfit.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/stancode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expose the Stan code of a fitted model represented by a coevfit object — stancode","text":"Printed Stan code","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/standata.html","id":null,"dir":"Reference","previous_headings":"","what":"Expose the Stan data list for a fitted model represented by a coevfit object — standata","title":"Expose the Stan data list for a fitted model represented by a coevfit object — standata","text":"Expose Stan data list fitted model represented coevfit object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/standata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expose the Stan data list for a fitted model represented by a coevfit object — standata","text":"","code":"standata(object)"},{"path":"https://scottclaessens.github.io/coevolve/reference/standata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expose the Stan data list for a fitted model represented by a coevfit object — standata","text":"object object class coevfit.","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/standata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expose the Stan data list for a fitted model represented by a coevfit object — standata","text":"Named list data Stan","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/summary.coevfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary of a fitted model represented by a coevfit object — summary.coevfit","title":"Create a summary of a fitted model represented by a coevfit object — summary.coevfit","text":"Create summary fitted model represented coevfit object","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/summary.coevfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary of a fitted model represented by a coevfit object — summary.coevfit","text":"","code":"# S3 method for class 'coevfit' summary(object, prob = 0.95, robust = FALSE, ...)"},{"path":"https://scottclaessens.github.io/coevolve/reference/summary.coevfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary of a fitted model represented by a coevfit object — summary.coevfit","text":"object object class coevfit. prob value 0 1 indicating desired probability covered uncertainty intervals. default 0.95. robust FALSE (default) mean used measure central tendency standard deviation measure variability. TRUE, median median absolute deviation applied instead. ... potential arguments","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/summary.coevfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a summary of a fitted model represented by a coevfit object — summary.coevfit","text":"convergence diagnostics rhat, ess_bulk, ess_tail described detail Vehtari et al. (2020).","code":""},{"path":"https://scottclaessens.github.io/coevolve/reference/summary.coevfit.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a summary of a fitted model represented by a coevfit object — summary.coevfit","text":"Aki Vehtari, Andrew Gelman, Daniel Simpson, Bob Carpenter, Paul-Christian Bürkner (2020). Rank-normalization, folding, localization: improved R-hat assessing convergence MCMC. Bayesian Analysis. 1–28. dpi:10.1214/20-BA1221","code":""}]
