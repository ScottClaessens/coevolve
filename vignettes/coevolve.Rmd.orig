---
title: "Introduction to the coevolve package"
output:
  rmarkdown::html_vignette:
    toc: true
date: "`r Sys.Date()`"
author: "Scott Claessens"
vignette: >
  %\VignetteIndexEntry{Introduction to the coevolve package}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE, warning=FALSE, message=FALSE}
knitr::opts_chunk$set(
  comment = NA,
  fig.path = "vignettes/",
  message = FALSE,
  warning = FALSE,
  dev = "png",
  dpi = 150,
  fig.asp = 0.8,
  out.width = "60%",
  fig.align = "center"
  )
library(pander)
```

## Introduction

This vignette provides an introduction to the **coevolve** package. It briefly
describes the class of dynamic coevolutionary model that the package is designed
to fit. It then runs through several working examples to showcase features of
the package, including models with different response distributions, missing
data, repeated observations, and controls for spatial location.

## The dynamic coevolutionary model

In the **coevolve** package, the main function is `coev_fit()`, which fits a
dynamic coevolutionary model to taxa variables given the phylogenetic
relationships among taxa. The model allows the user to determine whether
evolutionary change in one variable precedes evolutionary change in another
variable.

A full description of the dynamic coevolutionary model can be found in
[this pre-print](https://ecoevorxiv.org/repository/view/4119/). Briefly, the
model represents observed variables as latent variables that are allowed to
coevolve along an evolutionary time series. Coevolution unfolds according to a
stochastic differential equation similar to an Ornstein-Uhlenbeck process, which
contains both "selection" (tendency towards an optimum value) and "drift"
(exogenous Gaussian noise) components. Change in the latent variables depend
upon all other latent variables in the model and themselves, allowing users to
assess the directional influence of one variable on future change in another
variable.

Similar coevolutionary models are offered in programs like BayesTraits (see
[here](http://www.evolution.reading.ac.uk/BayesTraitsV4.1.1/BayesTraitsV4.1.1.html)).
However, these models are limited to a small number of discrete traits. The
**coevolve** package goes beyond these models by allowing the user to estimate
coevolutionary effects between any number of variables and a much wider range of
response distributions, including continuous, binary, ordinal, and count
distributions.

## A working example

To show the model in action, we will use data on political and religious
authority among 97 Austronesian societies. Political and religious authority are
both four-level ordinal variables representing whether each type of authority is
absent (not present above the household level), sublocal (incorporating a group
larger than the household but smaller than the local community), local
(incorporating the local community) and supralocal (incorporating more than one
local community). These data were compiled by Sheehan et al. (2023).

```{r authority-data}
library(coevolve)
head(authority$data)
```

Each society is on a separate row and is linked to a different Austronesian
language. These languages can be represented on a linguistic phylogeny (see
`authority$phylogeny`). We are interested in using this phylogeny to understand
how political and religious authority have coevolved over the course of
Austronesian cultural evolution.

To fit the dynamic coevolutionary model, we use the `coev_fit()` function.
Internally, this function builds the Stan code, builds a data list, and then
compiles and fits the model using the [cmdstanr](https://mc-stan.org/cmdstanr/)
package. Users can run these steps one-by-one using the `coev_make_stancode()`
and `coev_make_standata()` functions, but for now we just use the `coev_fit()`
function.

```{r authority-fit}
fit1 <-
  coev_fit(
    data = authority$data,
    variables = list(
      political_authority = "ordered_logistic",
      religious_authority = "ordered_logistic"
    ),
    id = "language",
    tree = authority$phylogeny,
    # set manual prior
    prior = list(A_offdiag = "normal(0, 2)"),
    # additional arguments for cmdstanr
    parallel_chains = 4,
    iter_sampling = 500,
    refresh = 0,
    seed = 1
  )
```

The function takes several arguments, including a dataset, a named list of
variables that we would like to coevolve in the model (along with their
associated response distributions), the column in the dataset that links to
the phylogeny tip labels, and a phylogeny of class `phylo`. The function sets
priors for the parameters by default, but it is possible for the user to
manually set these priors. The user can also pass additional arguments to
cmdstanr's `sample()` method which runs under the hood.

Once the model has fitted, we can print a summary of the parameters.

```{r authority-summary}
summary(fit1)
```

We can see a printed summary of the model parameters, including the
autoregressive effects (i.e., the effects of variables on themselves in the
future), the cross effects (i.e., the effects of variables on the other
variables in the future), the amount of drift, the continuous time intercepts
for the stochastic differential equation, and the ordinal cutpoints for both
variables.

While the summary output is useful, it is difficult to interpret the
parameters directly to make inferences about coevolutionary patterns. An
alternative approach is to directly "intervene" in the system. By doing this,
we can better understand how increases or decreases in a variable change the
optimal trait values of other variables in the system. For example, we can hold
one variable at its average value and then increase it by a standardised amount
to see how the optimal value for the other trait changes.

The function `coev_calculate_delta_theta()` allows the user to calculate
$\Delta\theta_{z}$, which is defined as the change in the optimal trait value
for one variable which results from a median absolute deviation increase in
another variable. This function returns a posterior distribution. We can easily
visualise the posterior distributions for all cross effects at once using the
function `coev_plot_delta_theta()`.

```{r authority-delta-theta, fig.height=5, fig.width=5}
coev_plot_delta_theta(fit1)
```

This plot shows the posterior distribution, the posterior median, and the 50%
and 89% credible intervals for $\Delta\theta_{z}$. We can conclude that
political and religious authority both influence each other in their evolution.
A one median absolute deviation increase in political authority results in an
increase in the optimal trait value for religious authority, and vice versa. In
other words, these two variables coevolve reciprocally over time.

One way of visualising this runaway coevolutionary process is by plotting a flow
field of evolutionary change. This plot visualises the strength and direction
of evolutionary change at different locations in trait space.

```{r authority-flowfield}
coev_plot_flowfield(
  object = fit1,
  var1 = "political_authority",
  var2 = "religious_authority"
  )
```

The arrows in this plot tend to point towards the upper right-hand corner,
suggesting that political and religious authority evolve towards higher levels
in a runaway coevolutionary process.

Another way of visualising coevolutionary dynamics is with a selection gradient
plot. This heatmap shows how selection acts on both variables at different
locations in trait space, with green indicating positive selection and red
indicating negative selection.

```{r authority-selection-gradient}
coev_plot_selection_gradient(
  object = fit1,
  var1 = "political_authority",
  var2 = "religious_authority"
)
```

We can see from this plot that as each variable increases, the selection on the
other variable increases.

## Available response distributions

In the above example, both variables were ordinal. As such, we declared both of
them to follow the "ordered_logistic" response distribution. But the
**coevolve** package supports several more response distributions.

```{r response-distributions, echo=FALSE, results='asis'}
tabl <- "
| Response distribution      | Data type       | Link function  |
|----------------------------|-----------------|----------------|
| bernoulli_logit            | Binary          | Logit          |
| ordered_logistic           | Ordinal         | Logit          |
| poisson_softplus           | Count           | Softplus       |
| negative_binomial_softplus | Count           | Softplus       |
| normal                     | Continuous real | -              |
| student_t                  | Continuous real | -              |
| lognormal                  | Positive real   | -              |
"
cat(tabl)
```

Different variables need not follow the same response distribution. This can be
useful when users would like to assess the coevolution between variables of
different types.

## Handling missing data

Often in comparative datasets, data will be missing for some taxa. Rather
than remove cases if they have any missing data, the `coev_fit()` function will
only remove cases if they have missing data for *all* coevolving variables. If
data are missing for some variables and not others, the function will impute the
missing values in the coevolutionary process.

We show this by modelling the coevolutionary relationships between brain weight
and group size across 21 primate species from the Lemuriformes clade. Data on
primate species were compiled by DeCasien et al. (2017). There are data for 143
primate species in total, but we focus on one clade to keep the example small
and simple.

```{r primates-data}
# filter dataset to Lemuriformes only
primates_data <- primates$data[primates$data$clade == "Lemuriformes",]

# prune phylogeny to Lemuriformes only
library(ape)
primates_phylogeny <- keep.tip(primates$phylogeny, primates_data$species)

# view data
head(primates_data[, c("species", "brain_weight", "group_size")])
```

Both variables are positive reals and are lognormally distributed. While there
are no missing data for the brain weight variable, some data are missing for the
group size variable.

In this case, the model will retain all available data and impute the missing
group size values.

```{r primates-fit}
fit2 <-
  coev_fit(
    data = primates_data,
    variables = list(
      brain_weight = "lognormal",
      group_size = "lognormal"
    ),
    id = "species",
    tree = primates_phylogeny,
    # additional arguments for cmdstanr
    parallel_chains = 4,
    iter_sampling = 500,
    refresh = 0,
    seed = 1
  )
summary(fit2)
```

Notice that the number of observations is still 21 in the summary output,
informing us that all observations were retained and any missing data were
imputed.

We can then use plotting functions as usual.

```{r primates-delta-theta, fig.height=5, fig.width=5}
coev_plot_delta_theta(fit2)
```

## Repeated observations

Another common feature of comparative datasets is repeated observations. In the
previous examples, we had only one observation per taxon. But often there will
be more than one observation for each taxon, such as when we have observed
multiple individuals of the same species. In these cases, it can be useful to
include all of these observations in the model and estimate the between-taxa
variation that is not due to the coevolutionary process.

We show this using an example dataset from de Villemereuil & Nakagawa (2014).
Suppose we have measured two continuous variables ($x$ and $y$) for 20 species,
with five observations for each species.

```{r repeated-data}
head(repeated$data)
```

We can fit the dynamic coevolutionary model to this dataset.

```{r repeated-fit}
fit3 <-
  coev_fit(
    data = repeated$data,
    variables = list(
      x = "normal",
      y = "normal"
    ),
    id = "species",
    tree = repeated$phylogeny,
    # additional arguments for cmdstanr
    parallel_chains = 4,
    iter_warmup = 2000,
    iter_sampling = 2000,
    refresh = 0,
    seed = 1
  )
summary(fit3)
```

In the model output, we can see that `coev_fit()` has detected the presence of
repeated observations and has consequently modelled additional standard
deviation and correlation parameters for $x$ and $y$. These parameters represent
the between-taxa variation and correlation that remains after accounting for
the coevolutionary process.

In this case, it appears that there is a high correlation between $x$ and $y$,
but this is due to species-specific effects rather than the coevolutionary
process.

```{r repeated-delta-theta}
# 89% credible interval for delta theta x -> y
dt_xy <- coev_calculate_delta_theta(fit3, predictor = "x", response = "y")
quantile(dt_xy, c(0.055, 0.945))
# 89% credible interval for delta theta y -> x
dt_yx <- coev_calculate_delta_theta(fit3, predictor = "y", response = "x")
quantile(dt_yx, c(0.055, 0.945))
```

## Controlling for spatial location

If we have data on the spatial location of taxa, sometimes it is useful to
control for this spatial location to ensure that our model is capturing deep
ancestral relationships rather than more recent diffusion among neighbours.
For example, when studying the coevolution of political and religious authority
in Austronesian societies, we would like to ensure that our results are due to
coevolution over deep cultural time rather than more recent borrowing among
societies with close geographic proximity.

The `dist_mat` argument in the `coev_fit()` function allows us to easily control
for spatial proximity. This argument takes a distance matrix between all taxa in
the phylogeny. If the distance matrix is specified by the user, the function
includes in the Stan code a separate Gaussian Process over spatial location for
each variable in the model.

Here is the geographic distance matrix (measured in metres) for the first five
Austronesian societies:

```{r authority-distance-matrix}
authority$distance_matrix[1:5, 1:5]
```

We can include this distance matrix in the model. The matrix is standardised to
vary between 0 and 1 under the hood to improve model sampling.

```{r authority-fit-with-distance}
fit4 <-
  coev_fit(
    data = authority$data,
    variables = list(
      political_authority = "ordered_logistic",
      religious_authority = "ordered_logistic"
    ),
    id = "language",
    tree = authority$phylogeny,
    dist_mat = authority$distance_matrix,
    # set manual prior
    prior = list(A_offdiag = "normal(0, 2)"),
    # additional arguments for cmdstanr
    parallel_chains = 4,
    iter_sampling = 500,
    refresh = 0,
    seed = 1
  )
summary(fit4)
```

The summary output shows that the model has estimated the parameters for two
Gaussian Process functions over geographic locations, one for each variable.

Plotting $\Delta\theta_{z}$ shows that our inferences are robust to controlling
for geographic location.

```{r authority-delta-theta-with-distance, fig.height=5, fig.width=5}
coev_plot_delta_theta(fit4)
```

## Model comparison

Since the underlying Stan code for these models returns a log likelihood vector
for all observations, it is possible to compare different models using methods
like approximate leave-one-out cross-validation. For example, we can use the
`loo_compare()` function from the [loo](https://mc-stan.org/loo/index.html)
package to see whether adding the distance matrix in the previous example
improved our out-of-sample predictive accuracy.

```{r model-comparison}
library(loo)
loo_compare(
  list(
    fit1 = fit1$fit$loo(), # authority model without distance matrix
    fit4 = fit4$fit$loo()  # authority model with distance matrix
  )
)
```

This model comparison suggests that adding spatial location to the model did not
improve out-of-sample predictive accuracy.

This model comparison approach may also be useful for comparing models with
different cross selection effects constrained to zero (see the `effects_mat`
argument in the `coev_fit()` function). The user can then test whether "turning
on" a particular cross selection effect improves model fit. However, currently
it is not possible to compare models that include different coevolving
variables, as the datasets and resulting log likelihood vectors vary between
models.

## Conclusion

We hope that this package is a useful addition to the phylogenetic comparative
methods toolkit. If you have any questions about the package, please feel free
to email Scott Claessens (scott.claessens@gmail.com) or Erik Ringen
(erikjacob.ringen@uzh.ch) or raise an issue over on GitHub:
https://github.com/ScottClaessens/coevolve/issues

## References

DeCasien, A. R., Williams, S. A., & Higham, J. P. (2017). Primate brain size is
predicted by diet but not sociality. *Nature Ecology & Evolution*, *1*(5), 0112.

de Villemereuil P. & Nakagawa, S. (2014). General quantitative genetic methods
for comparative biology. In L. Garamszegi (Ed.), *Modern phylogenetic
comparative methods and their application in evolutionary biology: concepts and
practice* (pp. 287-303). Springer, New York.

Sheehan, O., Watts, J., Gray, R. D., Bulbulia, J., Claessens, S., Ringen, E. J.,
& Atkinson, Q. D. (2023). Coevolution of religious and political authority in
Austronesian societies. *Nature Human Behaviour*, *7*(1), 38-45.
